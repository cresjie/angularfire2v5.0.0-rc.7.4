{"version":3,"file":"query_observable.spec.js","sourceRoot":"","sources":["../../../src/database-deprecated/query_observable.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Query, ScalarQuery } from './interfaces';\r\nimport { getOrderObservables, observeQuery } from 'angularfire2/database-deprecated';\r\n\r\nfunction scalarQueryTest(query: ScalarQuery, done: any) {\r\n  const queryObservable = observeQuery(query);\r\n  queryObservable.subscribe(result => {\r\n    expect(result).toEqual(query);\r\n    done();\r\n  });\r\n}\r\n\r\nfunction observableQueryTest(query: Query, nextProp: any, done: any) {\r\n  const queryObservable = observeQuery(query);\r\n  const toMerge: any = {};\r\n  queryObservable.subscribe(result => {\r\n    const merged = Object.assign(query, toMerge);\r\n    expect(result).toEqual(merged);\r\n    done();\r\n  });\r\n  Object.keys(nextProp).forEach(prop => {\r\n    query[prop].next(nextProp[prop]);\r\n    toMerge[prop] = nextProp[prop];\r\n  });\r\n}\r\n\r\ndescribe('observeQuery', () => {\r\n  const resultQuery = { orderByKey: true, startAt: <any>null, endAt: <any>null, equalTo: <any>null };\r\n\r\n  it('should return an observable', () => {\r\n    expect(observeQuery({}) instanceof Observable).toBe(true);\r\n  });\r\n\r\n  it('should immediately emit a query object if passed a POJO with only scalar values', () => {\r\n    let nextSpy = jasmine.createSpy('next');\r\n    let completeSpy = jasmine.createSpy('complete');\r\n    let query = { orderByChild: 'height', equalTo: 10 };\r\n    let obs = observeQuery(query, false);\r\n    obs.subscribe(nextSpy, () => {}, completeSpy);\r\n    expect(nextSpy).toHaveBeenCalledWith({\r\n      orderByChild: 'height',\r\n      equalTo: 10\r\n    });\r\n  });\r\n\r\n\r\n  it('should return null if called with no query', () => {\r\n    let nextSpy = jasmine.createSpy('next');\r\n    let completeSpy = jasmine.createSpy('complete');\r\n    let query:any = null;\r\n    let obs = observeQuery(query, false);\r\n    obs.subscribe(nextSpy, () => {}, completeSpy);\r\n    expect(nextSpy).toHaveBeenCalledWith(null);\r\n    expect(completeSpy).toHaveBeenCalled();\r\n  });\r\n\r\n\r\n  it('should emit an updated query if an attached observable emits new value', () => {\r\n    let nextSpy = jasmine.createSpy('next');\r\n    let completeSpy = jasmine.createSpy('complete');\r\n    let query = {\r\n      orderByKey: new Subject<boolean>()\r\n    };\r\n    let obs = observeQuery(query as {orderByKey: Observable<boolean>}, false);\r\n    let noOrderyQuery = { orderByKey: false };\r\n    obs.subscribe(nextSpy, () => {}, completeSpy);\r\n    query.orderByKey.next(true);\r\n    expect(nextSpy).toHaveBeenCalledWith({ orderByKey: true});\r\n    nextSpy.calls.reset();\r\n    expect(completeSpy).not.toHaveBeenCalled();\r\n    query.orderByKey.next(false);\r\n    expect(nextSpy).toHaveBeenCalledWith(noOrderyQuery);\r\n  });\r\n\r\n\r\n  it('should omit a key from the query if its observable emits null', () => {\r\n    let nextSpy = jasmine.createSpy('next');\r\n    let completeSpy = jasmine.createSpy('complete');\r\n    let query = {\r\n      orderByKey: new Subject<boolean>()\r\n    };\r\n    let obs = observeQuery(query as {orderByKey: Observable<boolean>}, false);\r\n    obs.subscribe(nextSpy, () => {}, completeSpy);\r\n    query.orderByKey.next(true);\r\n    expect(nextSpy).toHaveBeenCalledWith({ orderByKey: true });\r\n    nextSpy.calls.reset();\r\n    query.orderByKey.next(null!);\r\n    expect(nextSpy).toHaveBeenCalledWith({});\r\n  });\r\n\r\n\r\n  it('should omit only the orderBy type of the last emitted orderBy observable', () => {\r\n    let nextSpy = jasmine.createSpy('next');\r\n    let query = {\r\n      orderByKey: new Subject<boolean>(),\r\n      orderByPriority: new Subject<boolean>(),\r\n      orderByValue: new Subject<boolean>(),\r\n      orderByChild: new Subject<string>()\r\n    };\r\n    let obs = observeQuery(query as {\r\n      orderByKey: Observable<boolean>,\r\n      orderByPriority: Observable<boolean>,\r\n      orderByValue: Observable<boolean>,\r\n      orderByChild: Observable<string>\r\n    }, false);\r\n    obs.subscribe(nextSpy);\r\n    query.orderByChild.next('height');\r\n    expect(nextSpy).toHaveBeenCalledWith({\r\n      orderByChild: 'height'\r\n    });\r\n    nextSpy.calls.reset();\r\n    query.orderByKey.next(true);\r\n    expect(nextSpy).toHaveBeenCalledWith({\r\n      orderByKey: true\r\n    });\r\n    nextSpy.calls.reset();\r\n    query.orderByValue.next(true);\r\n    expect(nextSpy).toHaveBeenCalledWith({\r\n      orderByValue: true\r\n    });\r\n    nextSpy.calls.reset();\r\n    query.orderByChild.next('foo');\r\n    expect(nextSpy).toHaveBeenCalledWith({\r\n      orderByChild: 'foo'\r\n    });\r\n  });\r\n});\r\n\r\n\r\ndescribe('getOrderObservables', () => {\r\n  it('should be subscribable event if no observables found for orderby', () => {\r\n    let nextSpy = jasmine.createSpy('next');\r\n    let obs = getOrderObservables({});\r\n    obs.subscribe(nextSpy);\r\n    expect(nextSpy).toHaveBeenCalledWith(null);\r\n  });\r\n});\r\n\r\n\r\ndescribe('query combinations', () => {\r\n\r\n    describe('orderByChild', () => {\r\n      /*\r\n        orderByChild combinations\r\n        ----------------------\r\n        orderByChild(\"\").equalTo()\r\n        orderByChild(\"\").startAt()\r\n        orderByChild(\"\").startAt().endAt();\r\n        orderByChild(\"\").endAt();\r\n      */\r\n      it('should build an equalTo query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByChild: 'height',\r\n          equalTo: 94\r\n        }, done);\r\n      });\r\n\r\n      it('should build an equalTo query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByChild: 'height',\r\n          equalTo: new Subject()\r\n        };\r\n        observableQueryTest(query, { equalTo: 92 }, done);\r\n      });\r\n\r\n      it('should build a startAt query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByChild: 'height',\r\n          startAt: 94\r\n        }, done);\r\n      });\r\n\r\n      it('should build a startAt query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByChild: 'height',\r\n          startAt: new Subject()\r\n        };\r\n        observableQueryTest(query, { startAt: 92 }, done);\r\n      });\r\n\r\n      it('should build a endAt query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByChild: 'height',\r\n          endAt: 94\r\n        }, done);\r\n      });\r\n\r\n      it('should build a endAt query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByChild: 'height',\r\n          endAt: new Subject()\r\n        };\r\n        observableQueryTest(query, { endAt: 92 }, done);\r\n      });\r\n\r\n      it('should build a startAt().endAt() query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByChild: 'height',\r\n          startAt: 32,\r\n          endAt: 94\r\n        }, done);\r\n      });\r\n\r\n      it('should build a startAt().endAt() query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByChild: 'height',\r\n          endAt: new Subject(),\r\n          startAt: new Subject()\r\n        };\r\n        observableQueryTest(query, { startAt: 32, endAt: 92 }, done);\r\n      });\r\n\r\n    })\r\n\r\n    describe('orderByKey', () => {\r\n      /*\r\n        orderByKey combinations\r\n        ----------------------\r\n        orderByKey(\"\").equalTo()\r\n        orderByKey(\"\").startAt()\r\n        orderByKey(\"\").startAt().endAt();\r\n        orderByKey(\"\").endAt();\r\n      */\r\n      it('should build an equalTo query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByKey: true,\r\n          equalTo: 94\r\n        }, done);\r\n      });\r\n\r\n      it('should build an equalTo query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByKey: true,\r\n          equalTo: new Subject()\r\n        };\r\n        observableQueryTest(query, { equalTo: 92 }, done);\r\n      });\r\n\r\n      it('should build a startAt query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByKey: true,\r\n          startAt: 94\r\n        }, done);\r\n      });\r\n\r\n      it('should build a startAt query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByKey: true,\r\n          startAt: new Subject()\r\n        };\r\n        observableQueryTest(query, { startAt: 92 }, done);\r\n      });\r\n\r\n      it('should build a endAt query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByKey: true,\r\n          endAt: 94\r\n        }, done);\r\n      });\r\n\r\n      it('should build a endAt query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByKey: true,\r\n          endAt: new Subject()\r\n        };\r\n        observableQueryTest(query, { endAt: 92 }, done);\r\n      });\r\n\r\n      it('should build a startAt().endAt() query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByKey: true,\r\n          startAt: 32,\r\n          endAt: 94\r\n        }, done);\r\n      });\r\n\r\n      it('should build a startAt().endAt() query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByKey: true,\r\n          endAt: new Subject(),\r\n          startAt: new Subject()\r\n        };\r\n        observableQueryTest(query, { startAt: 32, endAt: 92 }, done);\r\n      });\r\n\r\n    });\r\n\r\n    describe('orderByValue', () => {\r\n      /*\r\n        orderByValue combinations\r\n        ----------------------\r\n        orderByValue(\"\").equalTo()\r\n        orderByValue(\"\").startAt()\r\n        orderByValue(\"\").startAt().endAt();\r\n        orderByValue(\"\").endAt();\r\n      */\r\n      it('should build an equalTo query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByValue: true,\r\n          equalTo: 21\r\n        }, done);\r\n      });\r\n\r\n      it('should build an equalTo query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByValue: true,\r\n          equalTo: new Subject()\r\n        };\r\n        observableQueryTest(query, { equalTo: 43 }, done);\r\n      });\r\n\r\n      it('should build a startAt query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByValue: true,\r\n          startAt: 25\r\n        }, done);\r\n      });\r\n\r\n      it('should build a startAt query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByValue: true,\r\n          startAt: new Subject()\r\n        };\r\n        observableQueryTest(query, { startAt: 11 }, done);\r\n      });\r\n\r\n      it('should build a endAt query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByValue: true,\r\n          endAt: 94\r\n        }, done);\r\n      });\r\n\r\n      it('should build a endAt query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByValue: true,\r\n          endAt: new Subject()\r\n        };\r\n        observableQueryTest(query, { endAt: 43 }, done);\r\n      });\r\n\r\n      it('should build a startAt().endAt() query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByValue: true,\r\n          startAt: 32,\r\n          endAt: 94\r\n        }, done);\r\n      });\r\n\r\n      it('should build a startAt().endAt() query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByValue: true,\r\n          endAt: new Subject(),\r\n          startAt: new Subject()\r\n        };\r\n        observableQueryTest(query, { startAt: 7, endAt: 12 }, done);\r\n      });\r\n\r\n    });\r\n\r\n    describe('orderByPriority', () => {\r\n      /*\r\n        orderByPriority combinations\r\n        ----------------------\r\n        orderByPriority(\"\").equalTo()\r\n        orderByPriority(\"\").startAt()\r\n        orderByPriority(\"\").startAt().endAt();\r\n        orderByPriority(\"\").endAt();\r\n      */\r\n      it('should build an equalTo query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByPriority: true,\r\n          equalTo: 21\r\n        }, done);\r\n      });\r\n\r\n      it('should build an equalTo query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByPriority: true,\r\n          equalTo: new Subject()\r\n        };\r\n        observableQueryTest(query, { equalTo: 43 }, done);\r\n      });\r\n\r\n      it('should build a startAt query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByPriority: true,\r\n          startAt: 25\r\n        }, done);\r\n      });\r\n\r\n      it('should build a startAt query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByPriority: true,\r\n          startAt: new Subject()\r\n        };\r\n        observableQueryTest(query, { startAt: 11 }, done);\r\n      });\r\n\r\n      it('should build a endAt query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByPriority: true,\r\n          endAt: 94\r\n        }, done);\r\n      });\r\n\r\n      it('should build a endAt query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByPriority: true,\r\n          endAt: new Subject()\r\n        };\r\n        observableQueryTest(query, { endAt: 43 }, done);\r\n      });\r\n\r\n      it('should build a startAt().endAt() query with scalar values', (done: any) => {\r\n        scalarQueryTest({\r\n          orderByPriority: true,\r\n          startAt: 32,\r\n          endAt: 94\r\n        }, done);\r\n      });\r\n\r\n      it('should build a startAt().endAt() query with an observable', (done: any) => {\r\n        const query = {\r\n          orderByPriority: true,\r\n          endAt: new Subject(),\r\n          startAt: new Subject()\r\n        };\r\n        observableQueryTest(query, { startAt: 7, endAt: 12 }, done);\r\n      });\r\n\r\n    });\r\n\r\n});\r\n\r\n\r\ndescribe('null values', () => {\r\n\r\n  it('should build an equalTo() query with a null scalar value', (done: any) => {\r\n    scalarQueryTest({\r\n      orderByChild: 'height',\r\n      equalTo: null\r\n    }, done);\r\n  });\r\n\r\n  it('should build a startAt() query with a null scalar value', (done: any) => {\r\n    scalarQueryTest({\r\n      orderByChild: 'height',\r\n      startAt: null\r\n    }, done);\r\n  });\r\n\r\n  it('should build an endAt() query with a null scalar value', (done: any) => {\r\n    scalarQueryTest({\r\n      orderByChild: 'height',\r\n      endAt: null\r\n    }, done);\r\n  });\r\n\r\n  it('should build an equalTo() query with a null observable value', (done: any) => {\r\n    const query = {\r\n      orderByChild: 'height',\r\n      equalTo: new Subject()\r\n    };\r\n    observableQueryTest(query, { equalTo: null }, done);\r\n  });\r\n\r\n  it('should build a startAt() query with a null observable value', (done: any) => {\r\n    const query = {\r\n      orderByChild: 'height',\r\n      startAt: new Subject()\r\n    };\r\n    observableQueryTest(query, { startAt: null }, done);\r\n  });\r\n\r\n  it('should build an endAt() query with a null observable value', (done: any) => {\r\n    const query = {\r\n      orderByChild: 'height',\r\n      endAt: new Subject()\r\n    };\r\n    observableQueryTest(query, { endAt: null }, done);\r\n  });\r\n\r\n});\r\n\r\ndescribe('audited queries', () => {\r\n\r\n  it('should immediately emit if not audited', () => {\r\n    let nextSpy = jasmine.createSpy('next');\r\n    let query = { orderByChild: 'height', startAt: new Subject(), endAt: new Subject() };\r\n    let obs = observeQuery(query, false);\r\n    obs.subscribe(nextSpy);\r\n    query.startAt.next(5);\r\n    expect(nextSpy).not.toHaveBeenCalled();\r\n    query.endAt.next(10);\r\n    expect(nextSpy).toHaveBeenCalledWith({\r\n      orderByChild: 'height',\r\n      startAt: 5,\r\n      endAt: 10\r\n    });\r\n    query.startAt.next(10);\r\n    expect(nextSpy).toHaveBeenCalledWith({\r\n      orderByChild: 'height',\r\n      startAt: 10,\r\n      endAt: 10\r\n    });\r\n    query.endAt.next(15);\r\n    expect(nextSpy).toHaveBeenCalledWith({\r\n      orderByChild: 'height',\r\n      startAt: 10,\r\n      endAt: 15\r\n    });\r\n  });\r\n\r\n  it('should emit the last query (in the event loop) if audited', (done: any) => {\r\n    let emits = 0;\r\n    let query = { orderByChild: 'height', startAt: new Subject(), endAt: new Subject() };\r\n    let obs = observeQuery(query, true);\r\n    obs.subscribe(result => {\r\n      switch (++emits) {\r\n      case 1:\r\n        expect(result).toEqual({\r\n          orderByChild: 'height',\r\n          startAt: 5,\r\n          endAt: 10\r\n        });\r\n        query.startAt.next(10);\r\n        query.endAt.next(15);\r\n        break;\r\n      case 2:\r\n        expect(result).toEqual({\r\n          orderByChild: 'height',\r\n          startAt: 10,\r\n          endAt: 15\r\n        });\r\n        done();\r\n        break;\r\n      }\r\n    });\r\n    query.startAt.next(5);\r\n    query.endAt.next(10);\r\n  });\r\n\r\n});\r\n"]}
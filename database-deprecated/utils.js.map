{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/database-deprecated/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { DataSnapshot, FirebaseDatabase } from '@firebase/database-types';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { Scheduler } from 'rxjs/Scheduler';\r\nimport { queue } from 'rxjs/scheduler/queue';\r\nimport { AFUnwrappedDataSnapshot, PathReference, DatabaseReference } from './interfaces';\r\n\r\nconst REGEX_ABSOLUTE_URL = /^[a-z]+:\\/\\/.*/;\r\n\r\nexport function isNil(obj: any): boolean {\r\n  return obj === undefined || obj === null;\r\n}\r\n\r\nexport function hasKey(obj: Object, key: string): boolean {\r\n  return obj && obj[key] !== undefined;\r\n}\r\n\r\nexport function isString(value: any): boolean {\r\n  return typeof value === 'string';\r\n}\r\n\r\nexport function isFirebaseRef(value: any): boolean {\r\n  return typeof value.set === 'function';\r\n}\r\n\r\nexport function isFirebaseDataSnapshot(value: any): boolean {\r\n  return typeof value.exportVal === 'function';\r\n}\r\n\r\nexport function isAFUnwrappedSnapshot(value: any): boolean {\r\n  return typeof value.$key === 'string';\r\n}\r\n\r\nexport function isFirebaseQuery(value: any): boolean {\r\n  return typeof value.orderByChild === 'function';\r\n}\r\n\r\nexport function isEmptyObject(obj: Object): boolean {\r\n  if (isNil(obj)) { return false; }\r\n  return Object.keys(obj).length === 0 && JSON.stringify(obj) === JSON.stringify({});\r\n}\r\n\r\nexport interface CheckUrlRef {\r\n  isUrl: () => any;\r\n  isRef: () => any;\r\n  isQuery?: () => any;\r\n}\r\n\r\n/**\r\n * Unwraps the data returned in the DataSnapshot. Exposes the DataSnapshot key and exists methods through the $key and $exists properties respectively. If the value is primitive, it is unwrapped using a $value property. The $ properies mean they cannot be saved in the Database as those characters are invalid.\r\n * @param {DataSnapshot} snapshot - The snapshot to unwrap\r\n * @return AFUnwrappedDataSnapshot\r\n * @example\r\n * unwrapMapFn(snapshot) => { name: 'David', $key: 'david', $exists: Function }\r\n */\r\nexport function unwrapMapFn (snapshot:DataSnapshot): AFUnwrappedDataSnapshot {\r\n  var unwrapped = !isNil(snapshot.val()) ? snapshot.val() : { $value: null };\r\n  if ((/string|number|boolean/).test(typeof unwrapped)) {\r\n    unwrapped = {\r\n      $value: unwrapped\r\n    };\r\n  }\r\n  Object.defineProperty(unwrapped, '$key', {\r\n    value: snapshot.ref.key,\r\n    enumerable: false\r\n  });\r\n  Object.defineProperty(unwrapped, '$exists', {\r\n    value: () => {\r\n      return snapshot.exists();\r\n    },\r\n    enumerable: false\r\n  });\r\n  return unwrapped;\r\n}\r\n\r\nexport function stripTrailingSlash(value: string): string {\r\n  // Is the last char a /\r\n  if (value.substring(value.length - 1, value.length) === '/') {\r\n    return value.substring(0, value.length - 1);\r\n  } else {\r\n    return value;\r\n  }\r\n}\r\n\r\nfunction getAbsUrl(root: string, url:string) {\r\n  if (!(/^[a-z]+:\\/\\/.*/.test(url))) {\r\n    // Provided url is relative.\r\n    // Strip any leading slash\r\n    url = root + '/' + stripLeadingSlash(url);\r\n  }\r\n  return url;\r\n}\r\n\r\nexport function stripLeadingSlash(value: string): string {\r\n  // Is the last char a /\r\n  if (value.substring(0, 1) === '/') {\r\n    return value.substring(1, value.length);\r\n  } else {\r\n    return value;\r\n  }\r\n}\r\n\r\nexport function isAbsoluteUrl(url: string) {\r\n  return REGEX_ABSOLUTE_URL.test(url);\r\n}\r\n\r\n/**\r\n * Returns a database reference given a Firebase App and an\r\n * absolute or relative path.\r\n * @param app - Firebase App\r\n * @param path - Database path, relative or absolute\r\n */\r\nexport function getRef(database: FirebaseDatabase, pathRef: PathReference): DatabaseReference {\r\n  // if a db ref was passed in, just return it\r\n  if(isFirebaseRef(pathRef)) {\r\n    return pathRef as DatabaseReference;\r\n  }\r\n\r\n  const path = pathRef as string;\r\n  if(isAbsoluteUrl(<string>pathRef)) {\r\n    return database.refFromURL(path);\r\n  }\r\n  return database.ref(path);\r\n}\r\n"]}
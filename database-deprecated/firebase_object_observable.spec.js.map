{"version":3,"file":"firebase_object_observable.spec.js","sourceRoot":"","sources":["../../../src/database-deprecated/firebase_object_observable.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TestBed, inject } from '@angular/core/testing';\r\nimport { FirebaseApp, FirebaseAppConfig, AngularFireModule } from 'angularfire2';\r\nimport { COMMON_CONFIG } from './test-config';\r\nimport { AngularFireDatabase, AngularFireDatabaseModule, FirebaseObjectObservable } from 'angularfire2/database-deprecated';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { map } from 'rxjs/operator/map';\r\nimport { FirebaseApp as FBApp } from '@firebase/app-types';\r\nimport { Reference } from '@firebase/database-types';\r\n\r\ndescribe('FirebaseObjectObservable', () => {\r\n\r\n  let O: FirebaseObjectObservable<any>;\r\n  let ref: Reference;\r\n  let app: FBApp;\r\n  let db: AngularFireDatabase;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        AngularFireModule.initializeApp(COMMON_CONFIG),\r\n        AngularFireDatabaseModule\r\n      ]\r\n    });\r\n    inject([FirebaseApp, AngularFireDatabase], (_app: FBApp, _db: AngularFireDatabase) => {\r\n      app = _app;\r\n      db = _db;\r\n      ref = app.database().ref();\r\n      O = new FirebaseObjectObservable((observer: Observer<any>) => {\r\n      }, ref);\r\n    })();\r\n  });\r\n\r\n  afterEach(done => {\r\n    ref.off();\r\n    ref.remove();\r\n    app.delete().then(done, done.fail);\r\n  });\r\n\r\n  it('should return an instance of FirebaseObservable when calling operators', () => {\r\n    let O = new FirebaseObjectObservable((observer: Observer<any>) => { });\r\n    expect(map.call(O, noop) instanceof FirebaseObjectObservable).toBe(true);\r\n  });\r\n\r\n  describe('$ref', () => {\r\n    it('should match the database path passed in the constructor', () => {\r\n      expect(O.$ref!.toString()).toEqual(ref.toString());\r\n    });\r\n  });\r\n\r\n  describe('set', () => {\r\n\r\n    it('should call set on the underlying ref', (done: any) => {\r\n      let setSpy = spyOn(ref, 'set');\r\n\r\n      O.subscribe();\r\n      O.set(1);\r\n      expect(setSpy).toHaveBeenCalledWith(1);\r\n      done();\r\n    });\r\n\r\n    it('should throw an exception if set when not subscribed', () => {\r\n      O = new FirebaseObjectObservable((observer: Observer<any>) => { });\r\n\r\n      expect(() => {\r\n        O.set('foo');\r\n      }).toThrowError('No ref specified for this Observable!')\r\n    });\r\n\r\n    it('should accept any type of value without compilation error', () => {\r\n      O.set('foo');\r\n    });\r\n\r\n\r\n    it('should resolve returned thenable when successful', (done: any) => {\r\n      O.set('foo').then(done, done.fail);\r\n    });\r\n\r\n  });\r\n\r\n  describe('update', () => {\r\n    const updateObject = { hot: 'firebae' };\r\n    it('should call update on the underlying ref', () => {\r\n      let updateSpy = spyOn(ref, 'update');\r\n\r\n      O.subscribe();\r\n      O.update(updateObject);\r\n      expect(updateSpy).toHaveBeenCalledWith(updateObject);\r\n    });\r\n\r\n    it('should throw an exception if updated when not subscribed', () => {\r\n      O = new FirebaseObjectObservable((observer: Observer<any>) => { });\r\n\r\n      expect(() => {\r\n        O.update(updateObject);\r\n      }).toThrowError('No ref specified for this Observable!')\r\n    });\r\n\r\n    it('should accept any type of value without compilation error', () => {\r\n      O.update(updateObject);\r\n    });\r\n\r\n    it('should resolve returned thenable when successful', (done: any) => {\r\n      O.update(updateObject).then(done, done.fail);\r\n    });\r\n\r\n  });\r\n\r\n  describe('remove', () => {\r\n\r\n    it('should call remove on the underlying ref', () => {\r\n      let removeSpy = spyOn(ref, 'remove');\r\n\r\n      O.subscribe();\r\n      O.remove();\r\n      expect(removeSpy).toHaveBeenCalledWith();\r\n    });\r\n\r\n    it('should throw an exception if removed when not subscribed', () => {\r\n      O = new FirebaseObjectObservable((observer: Observer<any>) => { });\r\n\r\n      expect(() => {\r\n        O.remove();\r\n      }).toThrowError('No ref specified for this Observable!')\r\n    });\r\n\r\n    it('should resolve returned thenable when successful', (done: any) => {\r\n      O.remove().then(done, done.fail);\r\n    });\r\n\r\n  });\r\n\r\n});\r\n\r\nfunction noop() { }\r\n"]}
{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../../../src/storage/storage.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,cAAc,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAElG,OAAO,EAAE,gBAAgB,EAA+B,MAAM,OAAO,CAAC;AAGtE,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAE,qBAAqB,EAAE,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAG9G,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,cAAc,CAAS,4BAA4B,CAAC,CAAC;AAUtF,MAAM;IAIJ,YAC6B,QACU,MACF,eACd,YACrB,IAAY;QAEZ,IAAI,CAAC,SAAS,GAAG,IAAI,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC7D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC;YACpC,MAAM,GAAG,GAAG,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,IAAI,SAAS,CAAC,CAAC;SAChD,CAAC,CAAC;KACJ;IAED,GAAG,CAAC,IAAY;QACd,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;KACjE;IAED,MAAM,CAAC,IAAY,EAAE,IAAS,EAAE,QAAyB;QACvD,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,GAAG,GAAG,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;KAChC;;;YA3BF,UAAU;;;4CAMN,MAAM,SAAC,iBAAiB;4CACxB,QAAQ,YAAI,MAAM,SAAC,eAAe;4CAClC,QAAQ,YAAI,MAAM,SAAC,aAAa;yCAChC,MAAM,SAAC,WAAW;YA1BgC,MAAM","sourcesContent":["import { Injectable, Inject, Optional, InjectionToken, NgZone, PLATFORM_ID } from '@angular/core';\r\nimport { FirebaseStorage, UploadMetadata } from '@firebase/storage-types';\r\nimport { createStorageRef, AngularFireStorageReference } from './ref';\r\nimport { createUploadTask, AngularFireUploadTask } from './task';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { FirebaseAppConfig, FirebaseAppName, FirebaseZoneScheduler, _firebaseAppFactory } from 'angularfire2';\r\nimport { FirebaseOptions } from '@firebase/app-types';\r\n\r\nexport const StorageBucket = new InjectionToken<string>('angularfire2.storageBucket');\r\n\r\n/**\r\n * AngularFireStorage Service\r\n *\r\n * This service is the main entry point for this feature module. It provides\r\n * an API for uploading and downloading binary files from Cloud Storage for\r\n * Firebase.\r\n */\r\n@Injectable()\r\nexport class AngularFireStorage {\r\n  public readonly storage: FirebaseStorage;\r\n  public readonly scheduler: FirebaseZoneScheduler;\r\n\r\n  constructor(\r\n    @Inject(FirebaseAppConfig) config:FirebaseOptions,\r\n    @Optional() @Inject(FirebaseAppName) name:string,\r\n    @Optional() @Inject(StorageBucket) storageBucket:string,\r\n    @Inject(PLATFORM_ID) platformId: Object,\r\n    zone: NgZone\r\n  ) {\r\n    this.scheduler = new FirebaseZoneScheduler(zone, platformId);\r\n    this.storage = zone.runOutsideAngular(() => {\r\n      const app = _firebaseAppFactory(config, name);\r\n      return app.storage(storageBucket || undefined);\r\n    });\r\n  }\r\n\r\n  ref(path: string) {\r\n    return createStorageRef(this.storage.ref(path), this.scheduler);\r\n  }\r\n\r\n  upload(path: string, data: any, metadata?: UploadMetadata) {\r\n    const storageRef = this.storage.ref(path);\r\n    const ref = createStorageRef(storageRef, this.scheduler);\r\n    return ref.put(data, metadata);\r\n  }\r\n\r\n}\r\n"]}
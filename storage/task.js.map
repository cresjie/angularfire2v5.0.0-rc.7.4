{"version":3,"file":"task.js","sourceRoot":"","sources":["../../../src/storage/task.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AAEjD,OAAO,EAAE,GAAG,EAAU,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAC;AAuB5C,MAAM,2BAA2B,IAAgB;IAC/C,IAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC9B,MAAM,CAAC;QACL,IAAI,EAAE,IAAI;QACV,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QAC1B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;QAC5B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;QAC5B,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QAC9B,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QAC9B,eAAe,EAAE,cAAM,OAAA,MAAM,EAAN,CAAM;QAC7B,WAAW,EAAE,cAAM,OAAA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAb,CAAa,CAAC,CAAC,EAAnC,CAAmC;QACtD,iBAAiB,EAAE;YAAM,OAAA,MAAM,CAAC,IAAI,CAClC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,gBAAgB,GAAG,CAAC,CAAC,UAAU,GAAG,GAAG,EAAvC,CAAuC,CAAC,CAClD;QAFwB,CAExB;KACF,CAAC;CACH","sourcesContent":["import { UploadTaskSnapshot, UploadTask } from '@firebase/storage-types';\r\nimport { fromTask } from './observable/fromTask';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { map, filter } from 'rxjs/operators';\r\nimport { from } from 'rxjs/observable/from';\r\n\r\nexport interface AngularFireUploadTask {\r\n  task: UploadTask,\r\n  snapshotChanges(): Observable<UploadTaskSnapshot | undefined>;\r\n  percentageChanges(): Observable<number | undefined>;\r\n  downloadURL(): Observable<string | null>;\r\n  pause(): boolean;\r\n  cancel(): boolean;\r\n  resume(): boolean;\r\n  then(\r\n    onFulfilled?: ((a: UploadTaskSnapshot) => any) | null, \r\n    onRejected?: ((a: Error) => any) | null\r\n  ): Promise<any>;\r\n  catch(onRejected: (a: Error) => any): Promise<any>;\r\n}\r\n\r\n/**\r\n * Create an AngularFireUploadTask from a regular UploadTask from the Storage SDK.\r\n * This method creates an observable of the upload and returns on object that provides\r\n * multiple methods for controlling and monitoring the file upload.\r\n * @param task \r\n */\r\nexport function createUploadTask(task: UploadTask): AngularFireUploadTask {\r\n  const inner$ = fromTask(task);\r\n  return {\r\n    task: task,\r\n    then: task.then.bind(task),\r\n    catch: task.catch.bind(task),\r\n    pause: task.pause.bind(task),\r\n    cancel: task.cancel.bind(task),\r\n    resume: task.resume.bind(task),\r\n    snapshotChanges: () => inner$,\r\n    downloadURL: () => from(task.then(s => s.downloadURL)),\r\n    percentageChanges: () => inner$.pipe(\r\n      map(s => s.bytesTransferred / s.totalBytes * 100)\r\n    )\r\n  };\r\n}\r\n"]}
{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../../src/auth/auth.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAClF,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAE,mBAAmB,EAAE,qBAAqB,EAAE,MAAM,cAAc,CAAC;AAE9G,OAAO,6BAA6B,CAAC;AACrC,OAAO,wBAAwB,CAAC;AAChC,OAAO,iCAAiC,CAAC;;IAoBvC,yBAC6B,QACU,MAChB,YACb,IAAY;QAJtB,iBAgCC;QA5BS,SAAI,GAAJ,IAAI,CAAQ;QAEpB,IAAM,SAAS,GAAG,IAAI,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC9D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC;YACjC,IAAM,GAAG,GAAG,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;SACnB,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,sBAAsB,CAC/C,SAAS,CAAC,iBAAiB,CACzB,IAAI,UAAU,CAAC,UAAA,UAAU;YACvB,IAAM,WAAW,GAAG,KAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAC7D,MAAM,CAAC,EAAE,WAAW,aAAA,EAAE,CAAC;SACxB,CAAC,CACH,CACF,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,sBAAsB,CAC7C,SAAS,CAAC,iBAAiB,CACzB,IAAI,UAAU,CAAC,UAAA,UAAU;YACvB,IAAM,WAAW,GAAG,KAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,EAAE,WAAW,aAAA,EAAE,CAAC;SACxB,CAAC,CACH,CACF,CAAC,SAAS,CAAC,UAAC,IAAc;YACzB,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAA;SAC9E,CAAC,CAAC;KAEJ;;gBAlDF,UAAU;;;gDAmBN,MAAM,SAAC,iBAAiB;gDACxB,QAAQ,YAAI,MAAM,SAAC,eAAe;6CAClC,MAAM,SAAC,WAAW;gBA9BgB,MAAM;;0BAF7C;;SAYa,eAAe","sourcesContent":["import { FirebaseAuth, User } from '@firebase/auth-types';\r\nimport { FirebaseOptions } from '@firebase/app-types';\r\nimport { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { FirebaseAppConfig, FirebaseAppName, _firebaseAppFactory, FirebaseZoneScheduler } from 'angularfire2';\r\n\r\nimport 'rxjs/add/operator/switchMap';\r\nimport 'rxjs/add/observable/of';\r\nimport 'rxjs/add/observable/fromPromise';\r\n\r\n@Injectable()\r\nexport class AngularFireAuth {\r\n\r\n  /**\r\n   * Firebase Auth instance\r\n   */\r\n  public readonly auth: FirebaseAuth;\r\n\r\n  /**\r\n   * Observable of authentication state; as of 4.0 this is only triggered via sign-in/out\r\n   */\r\n  public readonly authState: Observable<User|null>;\r\n\r\n  /**\r\n   * Observable of the signed-in user's ID token; which includes sign-in, sign-out, and token refresh events\r\n   */\r\n  public readonly idToken: Observable<string|null>;\r\n\r\n  constructor(\r\n    @Inject(FirebaseAppConfig) config:FirebaseOptions,\r\n    @Optional() @Inject(FirebaseAppName) name:string,\r\n    @Inject(PLATFORM_ID) platformId: Object,\r\n    private zone: NgZone\r\n  ) {\r\n    const scheduler = new FirebaseZoneScheduler(zone, platformId);\r\n    this.auth = zone.runOutsideAngular(() => {\r\n      const app = _firebaseAppFactory(config, name);\r\n      return app.auth();\r\n    });\r\n\r\n    this.authState = scheduler.keepUnstableUntilFirst(\r\n      scheduler.runOutsideAngular(\r\n        new Observable(subscriber => {\r\n          const unsubscribe = this.auth.onAuthStateChanged(subscriber);\r\n          return { unsubscribe };\r\n        })\r\n      )\r\n    );\r\n\r\n    this.idToken = scheduler.keepUnstableUntilFirst(\r\n      scheduler.runOutsideAngular(\r\n        new Observable(subscriber => {\r\n          const unsubscribe = this.auth.onIdTokenChanged(subscriber);\r\n          return { unsubscribe };\r\n        })\r\n      )\r\n    ).switchMap((user:User|null) => {\r\n      return user ? Observable.fromPromise(user.getIdToken()) : Observable.of(null)\r\n    });\r\n\r\n  }\r\n\r\n}\r\n"]}
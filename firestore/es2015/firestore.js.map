{"version":3,"file":"firestore.js","sourceRoot":"","sources":["../../../../src/firestore/firestore.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken, NgZone, PLATFORM_ID } from '@angular/core';\r\nimport { FirebaseFirestore, CollectionReference, DocumentReference } from '@firebase/firestore-types';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subscriber } from 'rxjs/Subscriber';\r\nimport { from } from 'rxjs/observable/from';\r\nimport { of } from 'rxjs/observable/of';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { FirebaseOptions } from '@firebase/app-types';\r\nimport { Injectable, Inject, Optional } from '@angular/core';\r\n\r\nimport { QueryFn, AssociatedReference } from './interfaces';\r\nimport { AngularFirestoreDocument } from './document/document';\r\nimport { AngularFirestoreCollection } from './collection/collection';\r\n\r\nimport { FirebaseAppConfig, FirebaseAppName, _firebaseAppFactory, FirebaseZoneScheduler } from 'angularfire2';\r\n\r\n/**\r\n * The value of this token determines whether or not the firestore will have persistance enabled\r\n */\r\nexport const EnablePersistenceToken = new InjectionToken<boolean>('angularfire2.enableFirestorePersistence');\r\n\r\n\r\n/**\r\n * A utility methods for associating a collection reference with\r\n * a query.\r\n *\r\n * @param collectionRef - A collection reference to query\r\n * @param queryFn - The callback to create a query\r\n *\r\n * Example:\r\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\r\n *  return ref.where('age', '<', 200);\r\n * });\r\n */\r\nexport function associateQuery(collectionRef: CollectionReference, queryFn = ref => ref): AssociatedReference {\r\n  const query = queryFn(collectionRef);\r\n  const ref = collectionRef;\r\n  return { query, ref };\r\n}\r\n\r\n/**\r\n * AngularFirestore Service\r\n *\r\n * This service is the main entry point for this feature module. It provides\r\n * an API for creating Collection and Reference services. These services can\r\n * then be used to do data updates and observable streams of the data.\r\n *\r\n * Example:\r\n *\r\n * import { Component } from '@angular/core';\r\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from 'angularfire2/firestore';\r\n * import { Observable } from 'rxjs/Observable';\r\n * import { from } from 'rxjs/observable/from';\r\n *\r\n * @Component({\r\n *   selector: 'app-my-component',\r\n *   template: `\r\n *    <h2>Items for {{ (profile | async)?.name }}\r\n *    <ul>\r\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\r\n *    </ul>\r\n *    <div class=\"control-input\">\r\n *       <input type=\"text\" #itemname />\r\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\r\n *    </div>\r\n *   `\r\n * })\r\n * export class MyComponent implements OnInit {\r\n *\r\n *   // services for data operations and data streaming\r\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\r\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\r\n *\r\n *   // observables for template\r\n *   items: Observable<Item[]>;\r\n *   profile: Observable<Profile>;\r\n *\r\n *   // inject main service\r\n *   constructor(private readonly afs: AngularFirestore) {}\r\n *\r\n *   ngOnInit() {\r\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\r\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\r\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\r\n *\r\n *     this.profileRef = afs.doc('users/davideast');\r\n *     this.profile = this.profileRef.valueChanges();\r\n *   }\r\n *\r\n *   addItem(name: string) {\r\n *     const user = 'davideast';\r\n *     this.itemsRef.add({ name, user });\r\n *   }\r\n * }\r\n */\r\n@Injectable()\r\nexport class AngularFirestore {\r\n  public readonly firestore: FirebaseFirestore;\r\n  public readonly persistenceEnabled$: Observable<boolean>;\r\n  public readonly scheduler: FirebaseZoneScheduler;\r\n\r\n  /**\r\n   * Each Feature of AngularFire has a FirebaseApp injected. This way we\r\n   * don't rely on the main Firebase App instance and we can create named\r\n   * apps and use multiple apps.\r\n   * @param app\r\n   */\r\n  constructor(\r\n    @Inject(FirebaseAppConfig) config:FirebaseOptions,\r\n    @Optional() @Inject(FirebaseAppName) name:string,\r\n    @Optional() @Inject(EnablePersistenceToken) shouldEnablePersistence: boolean,\r\n    @Inject(PLATFORM_ID) platformId: Object,\r\n    zone: NgZone\r\n  ) {\r\n    this.scheduler = new FirebaseZoneScheduler(zone, platformId);\r\n    this.firestore = zone.runOutsideAngular(() => {\r\n      const app = _firebaseAppFactory(config, name);\r\n      return app.firestore();\r\n    });\r\n\r\n    this.persistenceEnabled$ = zone.runOutsideAngular(() =>\r\n        shouldEnablePersistence ? from(this.firestore.enablePersistence().then(() => true, () => false))\r\n                                : of(false)\r\n      )\r\n      .catch(() => of(false)); // https://github.com/firebase/firebase-js-sdk/issues/608\r\n  }\r\n\r\n  /**\r\n   * Create a reference to a Firestore Collection based on a path or\r\n   * CollectionReference and an optional query function to narrow the result\r\n   * set.\r\n   * @param pathOrRef\r\n   * @param queryFn\r\n   */\r\n  collection<T>(path: string, queryFn?: QueryFn): AngularFirestoreCollection<T>\r\n  collection<T>(ref: CollectionReference, queryFn?: QueryFn): AngularFirestoreCollection<T>\r\n  collection<T>(pathOrRef: string | CollectionReference, queryFn?: QueryFn): AngularFirestoreCollection<T> {\r\n    let collectionRef: CollectionReference;\r\n    if (typeof pathOrRef === 'string') {\r\n      collectionRef = this.firestore.collection(pathOrRef);\r\n    } else {\r\n      collectionRef = pathOrRef;\r\n    }\r\n    const { ref, query } = associateQuery(collectionRef, queryFn);\r\n    return new AngularFirestoreCollection<T>(ref, query, this);\r\n  }\r\n\r\n  /**\r\n   * Create a reference to a Firestore Document based on a path or\r\n   * DocumentReference. Note that documents are not queryable because they are\r\n   * simply objects. However, documents have sub-collections that return a\r\n   * Collection reference and can be queried.\r\n   * @param pathOrRef\r\n   */\r\n  doc<T>(path: string): AngularFirestoreDocument<T>\r\n  doc<T>(ref: DocumentReference): AngularFirestoreDocument<T>\r\n  doc<T>(pathOrRef: string | DocumentReference): AngularFirestoreDocument<T> {\r\n    let ref: DocumentReference;\r\n    if (typeof pathOrRef === 'string') {\r\n      ref = this.firestore.doc(pathOrRef);\r\n    } else {\r\n      ref = pathOrRef;\r\n    }\r\n    return new AngularFirestoreDocument<T>(ref, this);\r\n  }\r\n\r\n  /**\r\n   * Returns a generated Firestore Document Id.\r\n   */\r\n  createId() {\r\n    return this.firestore.collection('_').doc().id\r\n  }\r\n}\r\n"]}
{"version":3,"file":"changes.js","sourceRoot":"","sources":["../../../../../src/firestore/collection/changes.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAG1D,OAAO,uBAAuB,CAAC;AAC/B,OAAO,0BAA0B,CAAC;AAClC,OAAO,wBAAwB,CAAC;AAShC,MAAM,qBAAqB,KAAY;IACrC,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC;SAC5B,GAAG,CAAC,MAAM,IACT,MAAM,CAAC,OAAO,CAAC,UAAU;SACtB,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;CACjE;AAMD,MAAM,wBAAwB,KAAY,EAAE,MAA4B;IACtE,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC;SAC5B,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC;SAC1C,IAAI,CAAC,CAAC,OAAO,EAAE,OAAO,KAAK,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC;SACxE,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;CACrE;AASD,MAAM,yBAAyB,OAAyB,EAAE,OAAyB,EAAE,MAA4B;IAC/G,OAAO,CAAC,OAAO,CAAC,MAAM;QAEpB,EAAE,CAAA,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,OAAO,GAAG,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SAC1C;KACF,CAAC,CAAC;IACH,MAAM,CAAC,OAAO,CAAC;CAChB;AAOD,MAAM,wBAAwB,QAA0B,EAAE,MAAsB;IAC9E,MAAM,CAAA,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACnB,KAAK,OAAO;YACV,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;aAEpF;YAAC,IAAI,CAAC,CAAC;gBACN,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;aAC7C;YACD,KAAK,CAAC;QACR,KAAK,UAAU;YAGb,EAAE,CAAA,CAAC,MAAM,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACvC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gBACpC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;aAC7C;YAAC,IAAI,CAAC,CAAC;gBACN,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;aAC7C;YACD,KAAK,CAAC;QACR,KAAK,SAAS;YACZ,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YACpC,KAAK,CAAC;KACT;IACD,MAAM,CAAC,QAAQ,CAAC;CACjB","sourcesContent":["import { fromCollectionRef } from '../observable/fromRef';\r\nimport { Query, DocumentChangeType, DocumentChange } from '@firebase/firestore-types';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/filter';\r\nimport 'rxjs/add/operator/scan';\r\n\r\nimport { DocumentChangeAction, Action } from '../interfaces';\r\n\r\n/**\r\n * Return a stream of document changes on a query. These results are not in sort order but in\r\n * order of occurence.\r\n * @param query\r\n */\r\nexport function docChanges(query: Query): Observable<DocumentChangeAction[]> {\r\n  return fromCollectionRef(query)\r\n    .map(action =>\r\n      action.payload.docChanges\r\n        .map(change => ({ type: change.type, payload: change })));\r\n}\r\n\r\n/**\r\n * Return a stream of document changes on a query. These results are in sort order.\r\n * @param query\r\n */\r\nexport function sortedChanges(query: Query, events: DocumentChangeType[]): Observable<DocumentChangeAction[]> {\r\n  return fromCollectionRef(query)\r\n    .map(changes => changes.payload.docChanges)\r\n    .scan((current, changes) => combineChanges(current, changes, events), [])\r\n    .map(changes => changes.map(c => ({ type: c.type, payload: c })));\r\n}\r\n\r\n/**\r\n * Combines the total result set from the current set of changes from an incoming set\r\n * of changes.\r\n * @param current\r\n * @param changes\r\n * @param events\r\n */\r\nexport function combineChanges(current: DocumentChange[], changes: DocumentChange[], events: DocumentChangeType[]) {\r\n  changes.forEach(change => {\r\n    // skip unwanted change types\r\n    if(events.indexOf(change.type) > -1) {\r\n      current = combineChange(current, change);\r\n    }\r\n  });\r\n  return current;\r\n}\r\n\r\n/**\r\n * Creates a new sorted array from a new change.\r\n * @param combined\r\n * @param change\r\n */\r\nexport function combineChange(combined: DocumentChange[], change: DocumentChange): DocumentChange[] {\r\n  switch(change.type) {\r\n    case 'added':\r\n      if (combined[change.newIndex] && combined[change.newIndex].doc.id == change.doc.id) {\r\n        // Not sure why the duplicates are getting fired\r\n      } else {\r\n        combined.splice(change.newIndex, 0, change);\r\n      }\r\n      break;\r\n    case 'modified':\r\n      // When an item changes position we first remove it\r\n      // and then add it's new position\r\n      if(change.oldIndex !== change.newIndex) {\r\n        combined.splice(change.oldIndex, 1);\r\n        combined.splice(change.newIndex, 0, change);\r\n      } else {\r\n        combined.splice(change.newIndex, 1, change);\r\n      }\r\n      break;\r\n    case 'removed':\r\n      combined.splice(change.oldIndex, 1);\r\n      break;\r\n  }\r\n  return combined;\r\n}\r\n"]}
{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/firestore/interfaces.ts"],"names":[],"mappings":"AAWC,CAAC","sourcesContent":["import { Subscriber } from 'rxjs/Subscriber';\r\nimport { DocumentChangeType, DocumentChange, CollectionReference, Query } from '@firebase/firestore-types';\r\n\r\nexport interface DocumentChangeAction {\r\n  type: DocumentChangeType;\r\n  payload: DocumentChange;\r\n}\r\n\r\nexport interface Action<T> {\r\n  type: string;\r\n  payload: T;\r\n};\r\n\r\nexport interface Reference<T> {\r\n  onSnapshot: (sub: Subscriber<any>) => any;\r\n}\r\n\r\n// A convience type for making a query.\r\n// Example: const query = (ref) => ref.where('name', == 'david');\r\nexport type QueryFn = (ref: CollectionReference) => Query;\r\n\r\n/**\r\n * A structure that provides an association between a reference\r\n * and a query on that reference. Note: Performing operations\r\n * on the reference can lead to confusing results with complicated\r\n * queries.\r\n *\r\n * Example:\r\n *\r\n * const query = ref.where('type', '==', 'Book').\r\n *                  .where('price', '>' 18.00)\r\n *                  .where('price', '<' 100.00)\r\n *                  .where('category', '==', 'Fiction')\r\n *                  .where('publisher', '==', 'BigPublisher')\r\n *\r\n * // This addition would not be a result of the query above\r\n * ref.add({\r\n *  type: 'Magazine',\r\n *  price: 4.99,\r\n *  category: 'Sports',\r\n *  publisher: 'SportsPublisher'\r\n * });\r\n */\r\nexport interface AssociatedReference {\r\n  ref: CollectionReference;\r\n  query: Query;\r\n}\r\n"]}
{"version":3,"file":"utils.spec.js","sourceRoot":"","sources":["../../../src/firestore/utils.spec.ts"],"names":[],"mappings":";;;;;;;;AAQA,MAAM,CAAC,MAAM,eAAe,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;AAE1D,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,SAAS,KAAa,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;AAEpF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAO,SAA4B,EAAE,aAAkC,EAAE,aAAa;IAEtH,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;IAEhC,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,KAAK,GAAa,EAAE,CAAC;IACzB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;QAC5C,MAAM,IAAI,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;QACnC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,eAAe,CAAC,CAAC;QACpD,KAAK,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAGH,MAAM,KAAK,CAAC,MAAM,EAAE,CAAC;IACrB,MAAM,CAAC,KAAK,CAAC;AACf,CAAC,CAAA,CAAA;AAED,MAAM,wBAAwB,KAAK,EAAE,GAAG;IACtC,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;IAC3D,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC/B,CAAC;AAED,MAAM,sBAAyB,UAAyC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,GAAG,GAAG;IAC/F,UAAU,CAAC;QACT,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC,EAAE,KAAK,CAAC,CAAC;AACZ,CAAC;AAED,MAAM,mBAAsB,UAAyC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,GAAG,GAAG;IAC5F,UAAU,CAAC;QACT,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC,EAAE,KAAK,CAAC,CAAC;AACZ,CAAC;AAED,MAAM,sBAAyB,UAAyC,EAAE,IAAI,EAAE,KAAK,GAAG,GAAG;IACzF,UAAU,CAAC;QACT,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;IAChC,CAAC,EAAE,KAAK,CAAC,CAAC;AACZ,CAAC","sourcesContent":["import { FirebaseFirestore, CollectionReference } from '@firebase/firestore-types';\r\nimport { AngularFirestoreCollection } from './collection/collection';\r\n\r\nexport interface Stock {\r\n  name: string;\r\n  price: number;\r\n}\r\n\r\nexport const FAKE_STOCK_DATA = { name: 'FAKE', price: 1 };\r\n\r\nexport const randomName = (firestore): string => firestore.collection('a').doc().id;\r\n\r\nexport const createRandomStocks = async (firestore: FirebaseFirestore, collectionRef: CollectionReference, numberOfItems) => {\r\n  // Create a batch to update everything at once\r\n  const batch = firestore.batch();\r\n  // Store the random names to delete them later\r\n  let count = 0;\r\n  let names: string[] = [];\r\n  Array.from(Array(numberOfItems)).forEach((a, i) => {\r\n    const name = randomName(firestore);\r\n    batch.set(collectionRef.doc(name), FAKE_STOCK_DATA);\r\n    names = [...names, name];\r\n  });\r\n  // Create the batch entries\r\n  // Commit!\r\n  await batch.commit();\r\n  return names;\r\n}\r\n\r\nexport function deleteThemAll(names, ref) {\r\n  const promises = names.map(name => ref.doc(name).delete());\r\n  return Promise.all(promises);\r\n}\r\n\r\nexport function delayUpdate<T>(collection: AngularFirestoreCollection<T>, path, data, delay = 250) {\r\n  setTimeout(() => {\r\n    collection.doc(path).update(data);\r\n  }, delay);\r\n}\r\n\r\nexport function delayAdd<T>(collection: AngularFirestoreCollection<T>, path, data, delay = 250) {\r\n  setTimeout(() => {\r\n    collection.doc(path).set(data);\r\n  }, delay);\r\n}\r\n\r\nexport function delayDelete<T>(collection: AngularFirestoreCollection<T>, path, delay = 250) {\r\n  setTimeout(() => {\r\n    collection.doc(path).delete();\r\n  }, delay);\r\n}\r\n"]}
{"version":3,"file":"collection.spec.js","sourceRoot":"","sources":["../../../../src/firestore/collection/collection.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { FirebaseApp, FirebaseAppConfig, AngularFireModule } from 'angularfire2';\r\nimport { AngularFirestore } from '../firestore';\r\nimport { AngularFirestoreModule } from '../firestore.module';\r\nimport { AngularFirestoreDocument } from '../document/document';\r\nimport { AngularFirestoreCollection } from './collection';\r\nimport { QueryFn } from '../interfaces';\r\n\r\nimport { FirebaseApp as FBApp } from '@firebase/app-types';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport 'rxjs/add/operator/skip';\r\n\r\nimport { TestBed, inject } from '@angular/core/testing';\r\nimport { COMMON_CONFIG } from '../test-config';\r\n\r\nimport { Stock, randomName, FAKE_STOCK_DATA, createRandomStocks, delayAdd, delayDelete, delayUpdate, deleteThemAll } from '../utils.spec';\r\n\r\nasync function collectionHarness(afs: AngularFirestore, items: number, queryFn?: QueryFn) {\r\n  const randomCollectionName = randomName(afs.firestore);\r\n  const ref = afs.firestore.collection(`${randomCollectionName}`);\r\n  if(!queryFn) { queryFn = (ref) => ref; }\r\n  const stocks = new AngularFirestoreCollection<Stock>(ref, queryFn(ref), afs);\r\n  let names = await createRandomStocks(afs.firestore, ref, items);\r\n  return { randomCollectionName, ref, stocks, names };\r\n}\r\n\r\ndescribe('AngularFirestoreCollection', () => {\r\n  let app: FBApp;\r\n  let afs: AngularFirestore;\r\n  let sub: Subscription;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        AngularFireModule.initializeApp(COMMON_CONFIG),\r\n        AngularFirestoreModule.enablePersistence()\r\n      ]\r\n    });\r\n    inject([FirebaseApp, AngularFirestore], (_app: FBApp, _afs: AngularFirestore) => {\r\n      app = _app;\r\n      afs = _afs;\r\n    })();\r\n  });\r\n\r\n  afterEach(async (done) => {\r\n    await app.delete();\r\n    done();\r\n  });\r\n\r\n  describe('valueChanges()', () => {\r\n\r\n    it('should get unwrapped snapshot', async (done: any) => {\r\n      const ITEMS = 4;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n\r\n      const sub = stocks.valueChanges().subscribe(data => {\r\n        // unsub immediately as we will be deleting data at the bottom\r\n        // and that will trigger another subscribe callback and fail\r\n        // the test\r\n        sub.unsubscribe();\r\n        // We added four things. This should be four.\r\n        // This could not be four if the batch failed or\r\n        // if the collection state is altered during a test run\r\n        expect(data.length).toEqual(ITEMS);\r\n        data.forEach(stock => {\r\n          // We used the same piece of data so they should all equal\r\n          expect(stock).toEqual(FAKE_STOCK_DATA);\r\n        });\r\n        // Delete them all\r\n        const promises = names.map(name => ref.doc(name).delete());\r\n        Promise.all(promises).then(done).catch(fail);\r\n      });\r\n\r\n    });\r\n\r\n    it('should handle multiple subscriptions (hot)', async (done: any) => {\r\n      const ITEMS = 4;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n      const changes = stocks.valueChanges();\r\n      const sub = changes.subscribe(() => {}).add(\r\n        changes.take(1).subscribe(data => {\r\n          expect(data.length).toEqual(ITEMS);\r\n          sub.unsubscribe();\r\n        })\r\n      ).add(() => {\r\n        deleteThemAll(names, ref).then(done).catch(done.fail);\r\n      });\r\n    });\r\n\r\n    it('should handle multiple subscriptions (warm)', async (done: any) => {\r\n      const ITEMS = 4;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n      const changes = stocks.valueChanges();\r\n      changes.take(1).subscribe(() => {}).add(() => {\r\n        const sub = changes.take(1).subscribe(data => {\r\n          expect(data.length).toEqual(ITEMS);\r\n        }).add(() => {\r\n          deleteThemAll(names, ref).then(done).catch(done.fail);\r\n        });\r\n      });\r\n    });\r\n\r\n    it('should handle dynamic queries that return empty sets', async (done) => {\r\n      const ITEMS = 10;\r\n      let count = 0;\r\n      let firstIndex = 0;\r\n      let pricefilter$ = new BehaviorSubject<number|null>(null);\r\n      const randomCollectionName = randomName(afs.firestore);\r\n      const ref = afs.firestore.collection(`${randomCollectionName}`);\r\n      let names = await createRandomStocks(afs.firestore, ref, ITEMS);\r\n      const sub = pricefilter$.switchMap(price => {\r\n        return afs.collection(randomCollectionName, ref => price ? ref.where('price', '==', price) : ref).valueChanges()\r\n      }).subscribe(data => {\r\n        count = count + 1;\r\n        // the first time should all be 'added'\r\n        if(count === 1) {\r\n          expect(data.length).toEqual(ITEMS);\r\n          pricefilter$.next(-1);\r\n        }\r\n        // on the second round, we should have filtered out everything\r\n        if(count === 2) {\r\n          expect(data.length).toEqual(0);\r\n          sub.unsubscribe();\r\n          deleteThemAll(names, ref).then(done).catch(done.fail);\r\n        }\r\n      });\r\n    });\r\n\r\n  });\r\n\r\n  describe('snapshotChanges()', () => {\r\n\r\n    it('should listen to all snapshotChanges() by default', async (done) => {\r\n      const ITEMS = 10;\r\n      let count = 0;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n      const sub = stocks.snapshotChanges().subscribe(data => {\r\n        const ids = data.map(d => d.payload.doc.id);\r\n        count = count + 1;\r\n        // the first time should all be 'added'\r\n        if(count === 1) {\r\n          // make an update\r\n          stocks.doc(names[0]).update({ price: 2});\r\n        }\r\n        // on the second round, make sure the array is still the same\r\n        // length but the updated item is now modified\r\n        if(count === 2) {\r\n          expect(data.length).toEqual(ITEMS);\r\n          const change = data.filter(x => x.payload.doc.id === names[0])[0];\r\n          expect(change.type).toEqual('modified');\r\n          sub.unsubscribe();\r\n          deleteThemAll(names, ref).then(done).catch(done.fail);\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should handle multiple subscriptions (hot)', async (done: any) => {\r\n      const ITEMS = 4;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n      const changes = stocks.snapshotChanges();\r\n      const sub = changes.subscribe(() => {}).add(\r\n        changes.take(1).subscribe(data => {\r\n          expect(data.length).toEqual(ITEMS);\r\n          sub.unsubscribe();\r\n        })\r\n      ).add(() => {\r\n        deleteThemAll(names, ref).then(done).catch(done.fail);\r\n      });\r\n    });\r\n\r\n    it('should handle multiple subscriptions (warm)', async (done: any) => {\r\n      const ITEMS = 4;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n      const changes = stocks.snapshotChanges();\r\n      changes.take(1).subscribe(() => {}).add(() => {\r\n        const sub = changes.take(1).subscribe(data => {\r\n          expect(data.length).toEqual(ITEMS);\r\n        }).add(() => {\r\n          deleteThemAll(names, ref).then(done).catch(done.fail);\r\n        });\r\n      });\r\n    });\r\n\r\n    it('should update order on queries', async (done) => {\r\n      const ITEMS = 10;\r\n      let count = 0;\r\n      let firstIndex = 0;\r\n      const { randomCollectionName, ref, stocks, names } =\r\n        await collectionHarness(afs, ITEMS, ref => ref.orderBy('price', 'desc'));\r\n      const sub = stocks.snapshotChanges().subscribe(data => {\r\n        count = count + 1;\r\n        // the first time should all be 'added'\r\n        if(count === 1) {\r\n          // make an update\r\n          firstIndex = data.filter(d => d.payload.doc.id === names[0])[0].payload.newIndex;\r\n          stocks.doc(names[0]).update({ price: 2 });\r\n        }\r\n        // on the second round, make sure the array is still the same\r\n        // length but the updated item is now modified\r\n        if(count === 2) {\r\n          expect(data.length).toEqual(ITEMS);\r\n          const change = data.filter(x => x.payload.doc.id === names[0])[0];\r\n          expect(change.type).toEqual('modified');\r\n          expect(change.payload.oldIndex).toEqual(firstIndex);\r\n          sub.unsubscribe();\r\n          deleteThemAll(names, ref).then(done).catch(done.fail);\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should be able to filter snapshotChanges() types - modified', async (done) => {\r\n      const ITEMS = 10;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n\r\n      const sub = stocks.snapshotChanges(['modified']).skip(1).subscribe(data => {\r\n        sub.unsubscribe();\r\n        const change = data.filter(x => x.payload.doc.id === names[0])[0];\r\n        expect(data.length).toEqual(1);\r\n        expect(change.payload.doc.data().price).toEqual(2);\r\n        expect(change.type).toEqual('modified');\r\n        deleteThemAll(names, ref).then(done).catch(done.fail);\r\n      });\r\n\r\n      delayUpdate(stocks, names[0], { price: 2 });\r\n    });\r\n\r\n    it('should be able to filter snapshotChanges() types - added', async (done) => {\r\n      const ITEMS = 10;\r\n      let { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n      const nextId = ref.doc('a').id;\r\n\r\n      const sub = stocks.snapshotChanges(['added']).skip(1).subscribe(data => {\r\n        sub.unsubscribe();\r\n        const change = data.filter(x => x.payload.doc.id === nextId)[0];\r\n        expect(data.length).toEqual(ITEMS + 1);\r\n        expect(change.payload.doc.data().price).toEqual(2);\r\n        expect(change.type).toEqual('added');\r\n        deleteThemAll(names, ref).then(done).catch(done.fail);\r\n        done();\r\n      });\r\n\r\n\r\n      names = names.concat([nextId]);\r\n      delayAdd(stocks, nextId, { price: 2 });\r\n    });\r\n\r\n    it('should be able to filter snapshotChanges() types - added/modified', async (done) => {\r\n      const ITEMS = 10;\r\n      let { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n      const nextId = ref.doc('a').id;\r\n      let count = 0;\r\n\r\n      const sub = stocks.snapshotChanges(['added', 'modified']).skip(1).take(2).subscribe(data => {\r\n        count += 1;\r\n        if (count == 1) {\r\n          const change = data.filter(x => x.payload.doc.id === nextId)[0];\r\n          expect(data.length).toEqual(ITEMS + 1);\r\n          expect(change.payload.doc.data().price).toEqual(2);\r\n          expect(change.type).toEqual('added');\r\n          delayUpdate(stocks, names[0], { price: 2 });\r\n        }\r\n        if (count == 2) {\r\n          const change = data.filter(x => x.payload.doc.id === names[0])[0];\r\n          expect(data.length).toEqual(ITEMS + 1);\r\n          expect(change.payload.doc.data().price).toEqual(2);\r\n          expect(change.type).toEqual('modified');\r\n        }\r\n      }).add(() => {\r\n        deleteThemAll(names, ref).then(done).catch(done.fail);\r\n      });\r\n\r\n      names = names.concat([nextId]);\r\n      delayAdd(stocks, nextId, { price: 2 });\r\n    });\r\n\r\n    it('should be able to filter snapshotChanges() types - removed', async (done) => {\r\n      const ITEMS = 10;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n\r\n      const sub = stocks.snapshotChanges(['added', 'removed']).skip(1).subscribe(data => {\r\n        sub.unsubscribe();\r\n        const change = data.filter(x => x.payload.doc.id === names[0]);\r\n        expect(data.length).toEqual(ITEMS - 1);\r\n        expect(change.length).toEqual(0);\r\n        deleteThemAll(names, ref).then(done).catch(done.fail);\r\n        done();\r\n      });\r\n\r\n      delayDelete(stocks, names[0], 400);\r\n    });\r\n\r\n  });\r\n\r\n  describe('stateChanges()', () => {\r\n\r\n    it('should get stateChanges() updates', async (done: any) => {\r\n      const ITEMS = 10;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n\r\n      const sub = stocks.stateChanges().subscribe(data => {\r\n        // unsub immediately as we will be deleting data at the bottom\r\n        // and that will trigger another subscribe callback and fail\r\n        // the test\r\n        sub.unsubscribe();\r\n        // We added ten things. This should be ten.\r\n        // This could not be ten if the batch failed or\r\n        // if the collection state is altered during a test run\r\n        expect(data.length).toEqual(ITEMS);\r\n        data.forEach(action => {\r\n          // We used the same piece of data so they should all equal\r\n          expect(action.payload.doc.data()).toEqual(FAKE_STOCK_DATA);\r\n        });\r\n        deleteThemAll(names, ref).then(done).catch(done.fail);\r\n      });\r\n\r\n    });\r\n\r\n    it('should listen to all stateChanges() by default', async (done) => {\r\n      const ITEMS = 10;\r\n      let count = 0;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n      const sub = stocks.stateChanges().subscribe(data => {\r\n        count = count + 1;\r\n        if(count === 1) {\r\n          stocks.doc(names[0]).update({ price: 2});\r\n        }\r\n        if(count === 2) {\r\n          expect(data.length).toEqual(1);\r\n          expect(data[0].type).toEqual('modified');\r\n          deleteThemAll(names, ref).then(done).catch(done.fail);\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should handle multiple subscriptions (hot)', async (done: any) => {\r\n      const ITEMS = 4;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n      const changes = stocks.stateChanges();\r\n      const sub = changes.subscribe(() => {}).add(\r\n        changes.take(1).subscribe(data => {\r\n          expect(data.length).toEqual(ITEMS);\r\n          sub.unsubscribe();\r\n        })\r\n      ).add(() => {\r\n        deleteThemAll(names, ref).then(done).catch(done.fail);\r\n      });\r\n    });\r\n\r\n    it('should handle multiple subscriptions (warm)', async (done: any) => {\r\n      const ITEMS = 4;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n      const changes = stocks.stateChanges();\r\n      changes.take(1).subscribe(() => {}).add(() => {\r\n        const sub = changes.take(1).subscribe(data => {\r\n          expect(data.length).toEqual(ITEMS);\r\n        }).add(() => {\r\n          deleteThemAll(names, ref).then(done).catch(done.fail);\r\n        });\r\n      });\r\n    });\r\n\r\n    it('should be able to filter stateChanges() types - modified', async (done) => {\r\n      const ITEMS = 10;\r\n      let count = 0;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n\r\n      const sub = stocks.stateChanges(['modified']).subscribe(data => {\r\n        sub.unsubscribe();\r\n        expect(data.length).toEqual(1);\r\n        expect(data[0].payload.doc.data().price).toEqual(2);\r\n        expect(data[0].type).toEqual('modified');\r\n        deleteThemAll(names, ref).then(done).catch(done.fail);\r\n        done();\r\n      });\r\n\r\n      delayUpdate(stocks, names[0], { price: 2 });\r\n    });\r\n\r\n    it('should be able to filter stateChanges() types - added', async (done) => {\r\n      const ITEMS = 10;\r\n      let count = 0;\r\n      let { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n\r\n      const sub = stocks.stateChanges(['added']).skip(1).subscribe(data => {\r\n        sub.unsubscribe();\r\n        expect(data.length).toEqual(1);\r\n        expect(data[0].payload.doc.data().price).toEqual(2);\r\n        expect(data[0].type).toEqual('added');\r\n        deleteThemAll(names, ref).then(done).catch(done.fail);\r\n        done();\r\n      });\r\n\r\n      const nextId = ref.doc('a').id;\r\n      names = names.concat([nextId]);\r\n      delayAdd(stocks, nextId, { price: 2 });\r\n    });\r\n\r\n    it('should be able to filter stateChanges() types - removed', async (done) => {\r\n      const ITEMS = 10;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n\r\n      const sub = stocks.stateChanges(['removed']).subscribe(data => {\r\n        sub.unsubscribe();\r\n        expect(data.length).toEqual(1);\r\n        expect(data[0].type).toEqual('removed');\r\n        deleteThemAll(names, ref).then(done).catch(done.fail);\r\n        done();\r\n      });\r\n\r\n      delayDelete(stocks, names[0], 400);\r\n    });\r\n  });\r\n\r\n  describe('auditTrail()', () => {\r\n    it('should listen to all events for auditTrail() by default', async (done) => {\r\n      const ITEMS = 10;\r\n      let count = 0;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n      const sub = stocks.auditTrail().subscribe(data => {\r\n        count = count + 1;\r\n        if(count === 1) {\r\n          stocks.doc(names[0]).update({ price: 2});\r\n        }\r\n        if(count === 2) {\r\n          sub.unsubscribe();\r\n          expect(data.length).toEqual(ITEMS + 1);\r\n          expect(data[data.length - 1].type).toEqual('modified');\r\n          deleteThemAll(names, ref).then(done).catch(done.fail);\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should be able to filter auditTrail() types - removed', async (done) => {\r\n      const ITEMS = 10;\r\n      const { randomCollectionName, ref, stocks, names } = await collectionHarness(afs, ITEMS);\r\n\r\n      const sub = stocks.auditTrail(['removed']).subscribe(data => {\r\n        sub.unsubscribe();\r\n        expect(data.length).toEqual(1);\r\n        expect(data[0].type).toEqual('removed');\r\n        deleteThemAll(names, ref).then(done).catch(done.fail);\r\n        done();\r\n      });\r\n\r\n      delayDelete(stocks, names[0], 400);\r\n    });\r\n  });\r\n\r\n});\r\n"]}
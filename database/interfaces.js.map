{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/database/interfaces.ts"],"names":[],"mappings":"AAwCC,CAAC","sourcesContent":["import { Reference, DataSnapshot, ThenableReference, Query } from '@firebase/database-types';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nexport type FirebaseOperation = string | Reference | DataSnapshot;\r\n\r\nexport interface AngularFireList<T> {\r\n  query: DatabaseQuery;\r\n  valueChanges(events?: ChildEvent[]): Observable<T[]>;\r\n  snapshotChanges(events?: ChildEvent[]): Observable<SnapshotAction[]>;\r\n  stateChanges(events?: ChildEvent[]): Observable<SnapshotAction>;\r\n  auditTrail(events?: ChildEvent[]): Observable<SnapshotAction[]>;\r\n  update(item: FirebaseOperation, data: T): Promise<void>;\r\n  set(item: FirebaseOperation, data: T): Promise<void>;\r\n  push(data: T): ThenableReference;\r\n  remove(item?: FirebaseOperation): Promise<void>;\r\n}\r\n\r\nexport interface AngularFireObject<T> {\r\n  query: DatabaseQuery;\r\n  valueChanges(): Observable<T | null>;\r\n  snapshotChanges(): Observable<SnapshotAction>;\r\n  update(data: Partial<T>): Promise<void>;\r\n  set(data: T): Promise<void>;\r\n  remove(): Promise<void>;\r\n}\r\n\r\nexport interface FirebaseOperationCases {\r\n  stringCase: () => Promise<void>;\r\n  firebaseCase?: () => Promise<void>;\r\n  snapshotCase?: () => Promise<void>;\r\n  unwrappedSnapshotCase?: () => Promise<void>;\r\n}\r\n\r\nexport type QueryFn = (ref: DatabaseReference) => DatabaseQuery;\r\nexport type ChildEvent = 'child_added' | 'child_removed' | 'child_changed' | 'child_moved';\r\nexport type ListenEvent = 'value' | ChildEvent;\r\n\r\nexport interface Action<T> {\r\n  type: ListenEvent;\r\n  payload: T;\r\n};\r\n\r\nexport interface AngularFireAction<T> extends Action<T> {\r\n  prevKey: string | null | undefined;\r\n  key: string | null;\r\n}\r\n\r\nexport type SnapshotAction = AngularFireAction<DatabaseSnapshot>;\r\n\r\nexport type Primitive = number | string | boolean;\r\n\r\nexport type DatabaseSnapshot = DataSnapshot;\r\nexport type DatabaseReference = Reference;\r\nexport type DatabaseQuery = Query;\r\nexport type QueryReference = DatabaseReference | DatabaseQuery;\r\nexport type PathReference = QueryReference | string;\r\n"]}
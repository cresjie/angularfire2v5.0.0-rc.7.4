{"version":3,"file":"remove.js","sourceRoot":"","sources":["../../../../../src/database/list/remove.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,UAAU,CAAC;AAM/C,MAAM,6BAA6B,GAAsB;IACvD,MAAM,CAAC,gBAAgB,IAAwB;QAC7C,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;SAAE;QAClC,MAAM,CAAC,mBAAmB,CAAC,IAAI,EAAE;YAC/B,UAAU,EAAE,MAAM,GAAG,CAAC,KAAK,CAAS,IAAI,CAAC,CAAC,MAAM,EAAE;YAClD,YAAY,EAAE,MAA0B,IAAK,CAAC,MAAM,EAAE;YACtD,YAAY,EAAE,MAAyB,IAAK,CAAC,GAAG,CAAC,MAAM,EAAE;SAC1D,CAAC,CAAC;KACJ,CAAA;CACF","sourcesContent":["import { DatabaseReference, FirebaseOperation, DatabaseSnapshot } from '../interfaces';\r\nimport { checkOperationCases } from '../utils';\r\nimport { createDataOperationMethod } from './data-operation';\r\nimport { DataSnapshot, Reference } from '@firebase/database-types';\r\n\r\n// TODO(davideast): Find out why TS thinks this returns firebase.Primise\r\n// instead of Promise.\r\nexport function createRemoveMethod(ref: DatabaseReference) {\r\n  return function remove(item?: FirebaseOperation): any {\r\n    if(!item) { return ref.remove(); }\r\n    return checkOperationCases(item, {\r\n      stringCase: () => ref.child(<string>item).remove(),\r\n      firebaseCase: () => (<DatabaseReference>item).remove(),\r\n      snapshotCase: () => (<DatabaseSnapshot>item).ref.remove()\r\n    });\r\n  }\r\n}\r\n"]}
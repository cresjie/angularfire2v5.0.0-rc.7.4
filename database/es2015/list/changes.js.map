{"version":3,"file":"changes.js","sourceRoot":"","sources":["../../../../../src/database/list/changes.ts"],"names":[],"mappings":"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","sourcesContent":["import { fromRef } from '../observable/fromRef';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { DatabaseQuery, ChildEvent, AngularFireAction, SnapshotAction } from '../interfaces';\r\nimport { isNil } from '../utils';\r\n\r\nimport 'rxjs/add/operator/scan';\r\nimport 'rxjs/add/observable/merge';\r\nimport 'rxjs/add/observable/of';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport 'rxjs/add/operator/filter';\r\nimport 'rxjs/add/operator/delay';\r\nimport 'rxjs/add/operator/distinctUntilChanged';\r\n\r\nexport function listChanges<T>(ref: DatabaseQuery, events: ChildEvent[]): Observable<SnapshotAction[]> {\r\n  return fromRef(ref, 'value', 'once').switchMap(snapshotAction => {\r\n    const childEvent$ = [Observable.of(snapshotAction)];\r\n    events.forEach(event => childEvent$.push(fromRef(ref, event)));\r\n    return Observable.merge(...childEvent$).scan(buildView, [])\r\n  })\r\n  .distinctUntilChanged();\r\n}\r\n\r\nfunction positionFor(changes: SnapshotAction[], key) {\r\n  const len = changes.length;\r\n  for(let i=0; i<len; i++) {\r\n    if(changes[i].payload.key === key) {\r\n      return i;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\nfunction positionAfter(changes: SnapshotAction[], prevKey?: string) {\r\n  if(isNil(prevKey)) { \r\n    return 0; \r\n  } else {\r\n    const i = positionFor(changes, prevKey);\r\n    if( i === -1) {\r\n      return changes.length;\r\n    } else {\r\n      return i + 1;\r\n    }\r\n  }\r\n}\r\n\r\nfunction buildView(current, action) {\r\n  const { payload, type, prevKey, key } = action; \r\n  const currentKeyPosition = positionFor(current, key);\r\n  const afterPreviousKeyPosition = positionAfter(current, prevKey);\r\n  switch (action.type) {\r\n    case 'value':\r\n      if (action.payload && action.payload.exists()) {\r\n        let prevKey = null;\r\n        action.payload.forEach(payload => {\r\n          const action = {payload, type: 'value', prevKey, key: payload.key};\r\n          prevKey = payload.key;\r\n          current = [...current, action];\r\n          return false;\r\n        });\r\n      }\r\n      return current;\r\n    case 'child_added':\r\n      if (currentKeyPosition > -1) {\r\n        // check that the previouskey is what we expect, else reorder\r\n        const previous = current[currentKeyPosition - 1];\r\n        if ((previous && previous.key || null) != prevKey) {\r\n          current = current.filter(x => x.payload.key !== payload.key);\r\n          current.splice(afterPreviousKeyPosition, 0, action);\r\n        }\r\n      } else if (prevKey == null) {\r\n        return [action, ...current];\r\n      } else {\r\n        current = current.slice()\r\n        current.splice(afterPreviousKeyPosition, 0, action);\r\n      }\r\n      return current;\r\n    case 'child_removed':\r\n      return current.filter(x => x.payload.key !== payload.key);\r\n    case 'child_changed':\r\n      return current.map(x => x.payload.key === key ? action : x);\r\n    case 'child_moved':\r\n      if(currentKeyPosition > -1) {\r\n        const data = current.splice(currentKeyPosition, 1)[0];\r\n        current = current.slice()\r\n        current.splice(afterPreviousKeyPosition, 0, data);\r\n        return current;\r\n      }\r\n      return current;\r\n    // default will also remove null results\r\n    default:\r\n      return current;\r\n  }\r\n}"]}
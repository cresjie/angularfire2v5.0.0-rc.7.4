{"version":3,"file":"database.spec.js","sourceRoot":"","sources":["../../../src/database/database.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { FirebaseApp, FirebaseAppConfig, AngularFireModule, FirebaseAppName } from 'angularfire2';\r\nimport { AngularFireDatabase, AngularFireDatabaseModule, RealtimeDatabaseURL } from 'angularfire2/database';\r\nimport { TestBed, inject } from '@angular/core/testing';\r\nimport { COMMON_CONFIG } from './test-config';\r\nimport { NgZone } from '@angular/core';\r\n\r\n// generate random string to test fidelity of naming\r\nconst FIREBASE_APP_NAME = (Math.random() + 1).toString(36).substring(7);\r\n\r\ndescribe('AngularFireDatabase', () => {\r\n  let app: FirebaseApp;\r\n  let db: AngularFireDatabase;\r\n  let zone: NgZone\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        AngularFireModule.initializeApp(COMMON_CONFIG, FIREBASE_APP_NAME),\r\n        AngularFireDatabaseModule\r\n      ]\r\n    });\r\n    inject([FirebaseApp, AngularFireDatabase, NgZone], (app_: FirebaseApp, _db: AngularFireDatabase, _zone: NgZone) => {\r\n      app = app_;\r\n      db = _db;\r\n      zone = _zone;\r\n    })();\r\n  });\r\n\r\n  afterEach(done => {\r\n    app.delete().then(done, done.fail);\r\n  });\r\n\r\n  describe('<constructor>', () => {\r\n\r\n    it('should be an AngularFireDatabase type', () => {\r\n      expect(db instanceof AngularFireDatabase).toEqual(true);\r\n    });\r\n\r\n    it('should have an initialized Firebase app', () => {\r\n      expect(db.database.app).toBeDefined();\r\n      expect(db.database.app).toEqual(app);\r\n    });\r\n\r\n    it('should accept a Firebase App in the constructor', () => {\r\n      const __db = new AngularFireDatabase(app.options, app.name, null!, {}, zone);\r\n      expect(__db instanceof AngularFireDatabase).toEqual(true);\r\n    });\r\n\r\n    it('should have an initialized Firebase app instance member', () => {\r\n      expect(db.database.app.name).toEqual(FIREBASE_APP_NAME);\r\n    });\r\n\r\n  });\r\n\r\n});\r\n\r\nconst FIREBASE_APP_NAME_TOO = (Math.random() + 1).toString(36).substring(7);\r\nconst FIREBASE_DB_NAME = `https://angularfire2-test2.firebaseio.com/`;\r\nconst QUERY = (Math.random() + 1).toString(36).substring(7)\r\n\r\ndescribe('AngularFireDatabase w/options', () => {\r\n  let app: FirebaseApp;\r\n  let db: AngularFireDatabase;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        AngularFireModule.initializeApp(COMMON_CONFIG, FIREBASE_APP_NAME),\r\n        AngularFireDatabaseModule\r\n      ],\r\n      providers: [\r\n        { provide: FirebaseAppName, useValue: FIREBASE_APP_NAME_TOO },\r\n        { provide: FirebaseAppConfig, useValue:  COMMON_CONFIG },\r\n        { provide: RealtimeDatabaseURL, useValue: FIREBASE_DB_NAME }\r\n      ]\r\n    });\r\n    inject([FirebaseApp, AngularFireDatabase], (app_: FirebaseApp, _db: AngularFireDatabase) => {\r\n      app = app_;\r\n      db = _db;\r\n    })();\r\n  });\r\n\r\n  afterEach(done => {\r\n    app.delete().then(done, done.fail);\r\n  });\r\n\r\n  describe('<constructor>', () => {\r\n\r\n    it('should be an AngularFireDatabase type', () => {\r\n      expect(db instanceof AngularFireDatabase).toEqual(true);\r\n    });\r\n\r\n    it('should have an initialized Firebase app', () => {\r\n      expect(db.database.app).toBeDefined();\r\n      expect(db.database.app).toEqual(app);\r\n    });\r\n\r\n    it('should have an initialized Firebase app instance member', () => {\r\n      expect(db.database.app.name).toEqual(FIREBASE_APP_NAME_TOO);\r\n    });\r\n\r\n    it('database be pointing to the provided DB instance', () => {\r\n      expect(db.database.ref().toString()).toEqual(FIREBASE_DB_NAME);\r\n    });\r\n\r\n    it('list should be using the provided DB instance', () => {\r\n      expect(db.list(QUERY).query.toString()).toEqual(`${FIREBASE_DB_NAME}${QUERY}`);\r\n    });\r\n\r\n    it('object should be using the provided DB instance', () => {\r\n      expect(db.object(QUERY).query.toString()).toEqual(`${FIREBASE_DB_NAME}${QUERY}`);\r\n    });\r\n  });\r\n\r\n});\r\n"]}
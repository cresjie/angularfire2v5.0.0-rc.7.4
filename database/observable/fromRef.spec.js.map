{"version":3,"file":"fromRef.spec.js","sourceRoot":"","sources":["../../../../src/database/observable/fromRef.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBA6LA;AA5LA,OAAO,EAAE,WAAW,EAAqB,iBAAiB,EAAE,MAAM,cAAc,CAAC;AACjF,OAAO,EAAuB,yBAAyB,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChG,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAG/C,IAAM,KAAK,GAAG,cAAM,OAAA,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAA7C,CAA6C,CAAC;AAClE,IAAM,iBAAiB,GAAG,KAAK,EAAE,CAAC;AAElC,QAAQ,CAAC,SAAS,EAAE;IAClB,IAAI,GAAgB,CAAC;IACrB,IAAI,GAAgC,CAAC;IACrC,IAAI,KAAK,GAAG,EAAE,CAAC;IACf,IAAM,KAAK,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,YAAI,GAAG,EAAE,KAAK,EAAE,IAAK,IAAI,EAAI,EAA7B,CAA6B,CAAC,CAAC;IAC/G,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAU,GAAG;QACtC,IAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;QAC7B,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAE7B,UAAU,CAAC;QACT,OAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE;gBACP,iBAAiB,CAAC,aAAa,CAAC,aAAa,EAAE,iBAAiB,CAAC;gBACjE,yBAAyB;aAC1B;SACF,CAAC,CAAC;QACH,MAAM,CAAC,CAAC,WAAW,CAAC,EAAE,UAAC,IAAiB;YACtC,GAAG,GAAG,IAAI,CAAC;YACX,GAAG,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;YAC3B,GAAG,GAAG,UAAC,IAAY,IAAO,GAAG,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3F,CAAC,CAAC,EAAE,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,UAAA,IAAI;QACZ,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE,UAAC,IAAI;QAC5B,IAAM,OAAO,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAM,GAAG,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACtC,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzB,IAAM,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,UAAA,MAAM;YAC9B,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;YAClB,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,EAAE,CAAC;YACP,GAAG,CAAC,WAAW,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,UAAC,IAAI;QAC/C,IAAM,OAAO,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAChB,IAAM,GAAG,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACtC,IAAM,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,UAAA,MAAM;YACtC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,UAAC,IAAI;QAC9B,IAAM,OAAO,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAM,GAAG,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAC9C,GAAG,CAAC,SAAS,CAAC,UAAA,MAAM,IAAK,CAAC,EAAE,cAAO,CAAC,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,UAAC,IAAI;QAC/C,IAAM,OAAO,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAM,GAAG,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACtC,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAM,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,UAAA,MAAM;YAC9B,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;YAGlB,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,EAAE,CAAC;YACP,GAAG,CAAC,WAAW,EAAE,CAAC;YAClB,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE;QAEjB,EAAE,CAAC,wCAAwC,EAAE,UAAO,IAAS;;;gBACrD,OAAO,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACb,GAAG,GAAG,OAAO,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;gBACxC,KAAK,GAAG,CAAC,CAAC;gBACR,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,UAAA,MAAM;oBAC9B,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;oBACV,IAAA,kBAAI,EAAE,wBAAO,CAAY;oBACjC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;oBACpC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,GAAI,CAAC,CAAC,CAAC;oBACnD,EAAE,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;wBAC3B,IAAI,EAAE,CAAC;wBACP,GAAG,CAAC,WAAW,EAAE,CAAC;wBAClB,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACnC,CAAC;gBACH,CAAC,CAAC,CAAC;;;aACJ,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,UAAO,IAAS;;;gBACvD,OAAO,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACb,GAAG,GAAG,OAAO,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;gBACxC,IAAI,GAAG,6BAA6B,CAAC;gBACrC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBACnB,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,UAAA,MAAM;oBACtB,IAAA,kBAAI,EAAE,wBAAO,CAAY;oBACjC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;oBACtC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBACjC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,GAAG,KAAA,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;oBAC7C,GAAG,CAAC,WAAW,EAAE,CAAC;oBAClB,IAAI,EAAE,CAAC;gBACT,CAAC,CAAC,CAAC;gBACH,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;;;aACrC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,UAAO,IAAS;;;gBACvD,OAAO,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACb,GAAG,GAAG,OAAO,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;gBACxC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBACnB,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBACrB,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,UAAA,MAAM;oBACtB,IAAA,kBAAI,EAAE,wBAAO,CAAY;oBACjC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;oBACtC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBACjC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,GAAG,KAAA,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;oBAC7C,GAAG,CAAC,WAAW,EAAE,CAAC;oBAClB,IAAI,EAAE,CAAC;gBACT,CAAC,CAAC,CAAC;gBACH,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;;;aAC7B,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,UAAO,IAAS;;;gBACrD,OAAO,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACb,GAAG,GAAG,OAAO,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;gBACtC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBACnB,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBACrB,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,UAAA,MAAM;oBACtB,IAAA,kBAAI,EAAE,wBAAO,CAAY;oBACjC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;oBACpC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBACjC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,GAAG,KAAA,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;oBAC7C,GAAG,CAAC,WAAW,EAAE,CAAC;oBAClB,IAAI,EAAE,CAAC;gBACT,CAAC,CAAC,CAAC;gBACH,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,cAAO,CAAC,CAAC,CAAC;;;aAChD,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,UAAC,IAAS;YAC/C,IAAM,OAAO,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;YAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,IAAM,GAAG,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACtC,IAAM,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,UAAA,MAAM;gBACtB,IAAA,kBAAI,EAAE,wBAAO,CAAY;gBACjC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBAC9B,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACrC,IAAI,EAAE,CAAC;gBACP,GAAG,CAAC,WAAW,EAAE,CAAC;gBAClB,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,UAAC,IAAS;YAC/C,IAAM,OAAO,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;YAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,IAAM,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAClE,IAAM,GAAG,GAAG,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YACpC,IAAM,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,UAAA,MAAM;gBAC9B,IAAI,KAAK,CAAC;gBACV,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,IAAI,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrE,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChC,IAAI,EAAE,CAAC;YACT,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","sourcesContent":["import { Reference } from '@firebase/database-types';\r\nimport { FirebaseApp, FirebaseAppConfig, AngularFireModule } from 'angularfire2';\r\nimport { AngularFireDatabase, AngularFireDatabaseModule, fromRef } from 'angularfire2/database';\r\nimport { TestBed, inject } from '@angular/core/testing';\r\nimport { COMMON_CONFIG } from '../test-config';\r\n\r\n// generate random string to test fidelity of naming\r\nconst rando = () => (Math.random() + 1).toString(36).substring(7);\r\nconst FIREBASE_APP_NAME = rando();\r\n\r\ndescribe('fromRef', () => {\r\n  let app: FirebaseApp;\r\n  let ref: (path: string) => Reference;\r\n  let batch = {};\r\n  const items = [{ name: 'one' }, { name: 'two' }, { name: 'three' }].map(item => ( { key: rando(), ...item } ));\r\n  Object.keys(items).forEach(function (key) {\r\n    const itemValue = items[key];\r\n    batch[itemValue.key] = itemValue;\r\n  });\r\n  // make batch immutable to preserve integrity\r\n  batch = Object.freeze(batch);\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        AngularFireModule.initializeApp(COMMON_CONFIG, FIREBASE_APP_NAME),\r\n        AngularFireDatabaseModule\r\n      ]\r\n    });\r\n    inject([FirebaseApp], (app_: FirebaseApp) => {\r\n      app = app_;\r\n      app.database().goOffline();\r\n      ref = (path: string) => { app.database().goOffline(); return app.database().ref(path); };\r\n    })();\r\n  });\r\n\r\n  afterEach(done => {\r\n    app.delete().then(done, done.fail);\r\n  });\r\n\r\n  it('it should be async', (done) => {\r\n    const itemRef = ref(rando());\r\n    itemRef.set(batch);\r\n    const obs = fromRef(itemRef, 'value');\r\n    let count = 0;\r\n    expect(count).toEqual(0);\r\n    const sub = obs.subscribe(change => {\r\n      count = count + 1;\r\n      expect(count).toEqual(1);\r\n      done();\r\n      sub.unsubscribe();\r\n    });\r\n    expect(count).toEqual(0);\r\n  });\r\n\r\n  it('it should should handle non-existence', (done) => {\r\n    const itemRef = ref(rando());\r\n    itemRef.set({});\r\n    const obs = fromRef(itemRef, 'value');\r\n    const sub = obs.take(1).subscribe(change => {\r\n      expect(change.payload.exists()).toEqual(false);\r\n      expect(change.payload.val()).toEqual(null);\r\n    }).add(done);\r\n  });\r\n\r\n  it('once should complete', (done) => {\r\n    const itemRef = ref(rando());\r\n    itemRef.set(batch);\r\n    const obs = fromRef(itemRef, 'value', 'once');\r\n    obs.subscribe(change => {}, () => {}, done);\r\n  });\r\n\r\n  it('it should listen and then unsubscribe', (done) => {\r\n    const itemRef = ref(rando());\r\n    itemRef.set(batch);\r\n    const obs = fromRef(itemRef, 'value');\r\n    let count = 0;\r\n    const sub = obs.subscribe(change => {\r\n      count = count + 1;\r\n      // hard coding count to one will fail if the unsub\r\n      // doesn't actually unsub\r\n      expect(count).toEqual(1);\r\n      done();\r\n      sub.unsubscribe();\r\n      itemRef.push({ name: 'anotha one' });\r\n    });\r\n  });\r\n\r\n  describe('events', () => {\r\n\r\n    it('should stream back a child_added event', async (done: any) => {\r\n      const itemRef = ref(rando());\r\n      itemRef.set(batch);\r\n      const obs = fromRef(itemRef, 'child_added');\r\n      let count = 0;\r\n      const sub = obs.subscribe(change => {\r\n        count = count + 1;\r\n        const { type, payload } = change;\r\n        expect(type).toEqual('child_added');\r\n        expect(payload.val()).toEqual(batch[payload.key!]);\r\n        if (count === items.length) {\r\n          done();\r\n          sub.unsubscribe();\r\n          expect(sub.closed).toEqual(true);\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should stream back a child_changed event', async (done: any) => {\r\n      const itemRef = ref(rando());\r\n      itemRef.set(batch);\r\n      const obs = fromRef(itemRef, 'child_changed');\r\n      const name = 'look at what you made me do';\r\n      const key = items[0].key;\r\n      const sub = obs.subscribe(change => {\r\n        const { type, payload } = change;\r\n        expect(type).toEqual('child_changed');\r\n        expect(payload.key).toEqual(key);\r\n        expect(payload.val()).toEqual({ key, name });\r\n        sub.unsubscribe();\r\n        done();\r\n      });\r\n      itemRef.child(key).update({ name });\r\n    });\r\n\r\n    it('should stream back a child_removed event', async (done: any) => {\r\n      const itemRef = ref(rando());\r\n      itemRef.set(batch);\r\n      const obs = fromRef(itemRef, 'child_removed');\r\n      const key = items[0].key;\r\n      const name = items[0].name;\r\n      const sub = obs.subscribe(change => {\r\n        const { type, payload } = change;\r\n        expect(type).toEqual('child_removed');\r\n        expect(payload.key).toEqual(key);\r\n        expect(payload.val()).toEqual({ key, name });\r\n        sub.unsubscribe();\r\n        done();\r\n      });\r\n      itemRef.child(key).remove();\r\n    });\r\n\r\n    it('should stream back a child_moved event', async (done: any) => {\r\n      const itemRef = ref(rando());\r\n      itemRef.set(batch);\r\n      const obs = fromRef(itemRef, 'child_moved');\r\n      const key = items[2].key;\r\n      const name = items[2].name;\r\n      const sub = obs.subscribe(change => {\r\n        const { type, payload } = change;\r\n        expect(type).toEqual('child_moved');\r\n        expect(payload.key).toEqual(key);\r\n        expect(payload.val()).toEqual({ key, name });\r\n        sub.unsubscribe();\r\n        done();\r\n      });\r\n      itemRef.child(key).setPriority(-100, () => {});\r\n    });\r\n\r\n    it('should stream back a value event', (done: any) => {\r\n      const itemRef = ref(rando());\r\n      itemRef.set(batch);\r\n      const obs = fromRef(itemRef, 'value');\r\n      const sub = obs.subscribe(change => {\r\n        const { type, payload } = change;\r\n        expect(type).toEqual('value');\r\n        expect(payload.val()).toEqual(batch);\r\n        done();\r\n        sub.unsubscribe();\r\n        expect(sub.closed).toEqual(true);\r\n      });\r\n    });\r\n\r\n    it('should stream back query results', (done: any) => {\r\n      const itemRef = ref(rando());\r\n      itemRef.set(batch);\r\n      const query = itemRef.orderByChild('name').equalTo(items[0].name);\r\n      const obs = fromRef(query, 'value');\r\n      const sub = obs.subscribe(change => {\r\n        let child;\r\n        change.payload.forEach(snap => { child = snap.val(); return true; });\r\n        expect(child).toEqual(items[0]);\r\n        done();\r\n      });\r\n    });\r\n\r\n  });\r\n\r\n});\r\n"]}
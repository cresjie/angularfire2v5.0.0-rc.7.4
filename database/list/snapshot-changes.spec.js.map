{"version":3,"file":"snapshot-changes.spec.js","sourceRoot":"","sources":["../../../../src/database/list/snapshot-changes.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Reference } from '@firebase/database-types';\r\nimport { FirebaseApp, FirebaseAppConfig, AngularFireModule } from 'angularfire2';\r\nimport { AngularFireDatabase, AngularFireDatabaseModule, snapshotChanges, ChildEvent } from 'angularfire2/database';\r\nimport { TestBed, inject } from '@angular/core/testing';\r\nimport { COMMON_CONFIG } from '../test-config';\r\nimport 'rxjs/add/operator/skip';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n// generate random string to test fidelity of naming\r\nconst rando = () => (Math.random() + 1).toString(36).substring(7);\r\nconst FIREBASE_APP_NAME = rando();\r\n\r\ndescribe('snapshotChanges', () => {\r\n  let app: FirebaseApp;\r\n  let db: AngularFireDatabase;\r\n  let createRef: (path: string) => Reference;\r\n  let batch = {};\r\n  const items = [{ name: 'zero' }, { name: 'one' }, { name: 'two' }].map((item, i) => ( { key: i.toString(), ...item } ));\r\n  Object.keys(items).forEach(function (key, i) {\r\n    const itemValue = items[key];\r\n    batch[i] = itemValue;\r\n  });\r\n  // make batch immutable to preserve integrity\r\n  batch = Object.freeze(batch);\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        AngularFireModule.initializeApp(COMMON_CONFIG, FIREBASE_APP_NAME),\r\n        AngularFireDatabaseModule\r\n      ]\r\n    });\r\n    inject([FirebaseApp, AngularFireDatabase], (app_: FirebaseApp, _db: AngularFireDatabase) => {\r\n      app = app_;\r\n      db = _db;\r\n      app.database().goOffline();\r\n      createRef = (path: string) => { app.database().goOffline(); return app.database().ref(path); };\r\n    })();\r\n  });\r\n\r\n  afterEach(done => {\r\n    app.delete().then(done, done.fail);\r\n  });\r\n\r\n  function prepareSnapshotChanges(opts: { events?: ChildEvent[], skip: number } = { skip: 0 }) {\r\n    const { events, skip } = opts;\r\n    const aref = createRef(rando());\r\n    const snapChanges = snapshotChanges(aref, events);\r\n    return {\r\n      snapChanges: snapChanges.skip(skip),\r\n      ref: aref\r\n    };\r\n  }\r\n\r\n  it('should listen to all events by default', (done) => {\r\n    const { snapChanges, ref } = prepareSnapshotChanges();\r\n    snapChanges.take(1).subscribe(actions => {\r\n      const data = actions.map(a => a.payload!.val());\r\n      expect(data).toEqual(items);\r\n    }).add(done);\r\n    ref.set(batch);\r\n  });\r\n\r\n  it('should handle multiple subscriptions (hot)', (done) => {\r\n    const { snapChanges, ref } = prepareSnapshotChanges();\r\n    const sub = snapChanges.subscribe(() => {}).add(done);\r\n    snapChanges.take(1).subscribe(actions => {\r\n      const data = actions.map(a => a.payload!.val());\r\n      expect(data).toEqual(items);\r\n    }).add(sub);\r\n    ref.set(batch);\r\n  });\r\n\r\n  it('should handle multiple subscriptions (warm)', done => {\r\n    const { snapChanges, ref } = prepareSnapshotChanges();\r\n    snapChanges.take(1).subscribe(() => {}).add(() => {\r\n      snapChanges.take(1).subscribe(actions => {\r\n        const data = actions.map(a => a.payload!.val());\r\n        expect(data).toEqual(items);\r\n      }).add(done);\r\n    });\r\n    ref.set(batch);\r\n  });\r\n\r\n it('should listen to only child_added events', (done) => {\r\n    const { snapChanges, ref } = prepareSnapshotChanges({ events: ['child_added'], skip: 0 });\r\n    snapChanges.take(1).subscribe(actions => {\r\n      const data = actions.map(a => a.payload!.val());\r\n      expect(data).toEqual(items);\r\n    }).add(done);\r\n    ref.set(batch);\r\n  });\r\n\r\n  it('should listen to only child_added, child_changed events', (done) => {\r\n    const { snapChanges, ref } = prepareSnapshotChanges({\r\n      events: ['child_added', 'child_changed'],\r\n      skip: 1\r\n    });\r\n    const name = 'ligatures';\r\n    snapChanges.take(1).subscribe(actions => {\r\n      const data = actions.map(a => a.payload!.val());;\r\n      const copy = [...items];\r\n      copy[0].name = name;\r\n      expect(data).toEqual(copy);\r\n    }).add(done);\r\n    app.database().goOnline();\r\n    ref.set(batch).then(() => {\r\n      ref.child(items[0].key).update({ name })\r\n    });\r\n  });\r\n\r\n  it('should handle empty sets', done => {\r\n    const aref = createRef(rando());\r\n    aref.set({});\r\n    snapshotChanges(aref).take(1).subscribe(data => {\r\n      expect(data.length).toEqual(0);\r\n    }).add(done);\r\n  });\r\n\r\n  it('should handle dynamic queries that return empty sets', done => {\r\n    const ITEMS = 10;\r\n    let count = 0;\r\n    let firstIndex = 0;\r\n    let namefilter$ = new BehaviorSubject<number|null>(null);\r\n    const aref = createRef(rando());\r\n    aref.set(batch);\r\n    namefilter$.switchMap(name => {\r\n      const filteredRef = name ? aref.child('name').equalTo(name) : aref\r\n      return snapshotChanges(filteredRef);\r\n    }).take(2).subscribe(data => {\r\n      count = count + 1;\r\n      // the first time should all be 'added'\r\n      if(count === 1) {\r\n        expect(Object.keys(data).length).toEqual(3);\r\n        namefilter$.next(-1);\r\n      }\r\n      // on the second round, we should have filtered out everything\r\n      if(count === 2) {\r\n        expect(Object.keys(data).length).toEqual(0);\r\n      }\r\n    }).add(done);\r\n  });\r\n\r\n});\r\n"]}
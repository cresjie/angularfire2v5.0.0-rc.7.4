{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/database/utils.ts"],"names":[],"mappings":"AAMA,MAAM,mBAAmB,KAAU;IACjC,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC;CAClC;AAED,MAAM,iCAAiC,KAAU;IAC/C,MAAM,CAAC,OAAO,KAAK,CAAC,SAAS,KAAK,UAAU,CAAC;CAC9C;AAED,MAAM,gBAAgB,GAAQ;IAC5B,MAAM,CAAC,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI,CAAC;CAC1C;AAED,MAAM,wBAAwB,KAAU;IACtC,MAAM,CAAC,OAAO,KAAK,CAAC,GAAG,KAAK,UAAU,CAAC;CACxC;AAQD,MAAM,iBAAiB,QAA0B,EAAE,OAAsB;IAEvE,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,OAA4B;UACxD,QAAQ,CAAC,GAAG,CAAC,OAAiB,CAAC,CAAC;CACrC;AAED,MAAM,8BAA8B,IAAuB,EAAE,KAA6B;IACxF,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnB,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;KAC3B;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,CAAC,KAAK,CAAC,YAAa,EAAE,CAAC;KAC9B;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,YAAa,EAAE,CAAC;KAC9B;IACD,MAAM,IAAI,KAAK,CAAC,oDAAkD,OAAO,IAAM,CAAC,CAAC;CAClF","sourcesContent":["import { Subscription } from 'rxjs/Subscription';\r\nimport { Scheduler } from 'rxjs/Scheduler';\r\nimport { queue } from 'rxjs/scheduler/queue';\r\nimport { PathReference, DatabaseReference, FirebaseOperation, FirebaseOperationCases } from './interfaces';\r\nimport { FirebaseDatabase } from '@firebase/database-types';\r\n\r\nexport function isString(value: any): boolean {\r\n  return typeof value === 'string';\r\n}\r\n\r\nexport function isFirebaseDataSnapshot(value: any): boolean {\r\n  return typeof value.exportVal === 'function';\r\n}\r\n\r\nexport function isNil(obj: any): boolean {\r\n  return obj === undefined || obj === null;\r\n}\r\n\r\nexport function isFirebaseRef(value: any): boolean {\r\n  return typeof value.set === 'function';\r\n}\r\n\r\n/**\r\n * Returns a database reference given a Firebase App and an\r\n * absolute or relative path.\r\n * @param app - Firebase App\r\n * @param path - Database path, relative or absolute\r\n */\r\nexport function getRef(database: FirebaseDatabase, pathRef: PathReference): DatabaseReference {\r\n  // if a db ref was passed in, just return it\r\n  return isFirebaseRef(pathRef) ? pathRef as DatabaseReference\r\n    : database.ref(pathRef as string);\r\n}\r\n\r\nexport function checkOperationCases(item: FirebaseOperation, cases: FirebaseOperationCases) : Promise<void> {\r\n  if (isString(item)) {\r\n    return cases.stringCase();\r\n  } else if (isFirebaseRef(item)) {\r\n    return cases.firebaseCase!();\r\n  } else if (isFirebaseDataSnapshot(item)) {\r\n    return cases.snapshotCase!();\r\n  }\r\n  throw new Error(`Expects a string, snapshot, or reference. Got: ${typeof item}`);\r\n}\r\n"]}